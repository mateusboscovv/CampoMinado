
Campo_Minado.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dd0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000914  08002edc  08002edc  00012edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037f0  080037f0  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  080037f0  080037f0  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037f0  080037f0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037f0  080037f0  000137f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037f4  080037f4  000137f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080037f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000094  0800388c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  0800388c  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c22  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000168a  00000000  00000000  00027cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006f8  00000000  00000000  00029370  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000170dd  00000000  00000000  00029a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00006505  00000000  00000000  00040b45  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0008239d  00000000  00000000  0004704a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000c93e7  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000628  00000000  00000000  000c9468  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00001fc8  00000000  00000000  000c9a90  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  000cba58  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000cba7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ec4 	.word	0x08002ec4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08002ec4 	.word	0x08002ec4

0800014c <ST7735_Select>:
    ST7735_NORON  ,    Delay, //  3: Normal display on, no args, w/HAL_Delay
      10,                     //     10 ms HAL_Delay
    ST7735_DISPON ,    Delay, //  4: Main screen turn on, no args w/HAL_Delay
      100 };                  //     100 ms HAL_Delay

static void ST7735_Select() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2110      	movs	r1, #16
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <ST7735_Select+0x14>)
 8000156:	f001 fb74 	bl	8001842 <HAL_GPIO_WritePin>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010800 	.word	0x40010800

08000164 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	2110      	movs	r1, #16
 800016c:	4802      	ldr	r0, [pc, #8]	; (8000178 <ST7735_Unselect+0x14>)
 800016e:	f001 fb68 	bl	8001842 <HAL_GPIO_WritePin>
}
 8000172:	bf00      	nop
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40010800 	.word	0x40010800

0800017c <ST7735_Reset>:

static void ST7735_Reset() {
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	2102      	movs	r1, #2
 8000184:	4806      	ldr	r0, [pc, #24]	; (80001a0 <ST7735_Reset+0x24>)
 8000186:	f001 fb5c 	bl	8001842 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800018a:	2005      	movs	r0, #5
 800018c:	f001 f8e2 	bl	8001354 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000190:	2201      	movs	r2, #1
 8000192:	2102      	movs	r1, #2
 8000194:	4802      	ldr	r0, [pc, #8]	; (80001a0 <ST7735_Reset+0x24>)
 8000196:	f001 fb54 	bl	8001842 <HAL_GPIO_WritePin>
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010c00 	.word	0x40010c00

080001a4 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	4603      	mov	r3, r0
 80001ac:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80001ae:	2200      	movs	r2, #0
 80001b0:	2101      	movs	r1, #1
 80001b2:	4807      	ldr	r0, [pc, #28]	; (80001d0 <ST7735_WriteCommand+0x2c>)
 80001b4:	f001 fb45 	bl	8001842 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80001b8:	1df9      	adds	r1, r7, #7
 80001ba:	f04f 33ff 	mov.w	r3, #4294967295
 80001be:	2201      	movs	r2, #1
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <ST7735_WriteCommand+0x30>)
 80001c2:	f001 ffc5 	bl	8002150 <HAL_SPI_Transmit>
}
 80001c6:	bf00      	nop
 80001c8:	3708      	adds	r7, #8
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40010c00 	.word	0x40010c00
 80001d4:	200000f8 	.word	0x200000f8

080001d8 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	2101      	movs	r1, #1
 80001e6:	4807      	ldr	r0, [pc, #28]	; (8000204 <ST7735_WriteData+0x2c>)
 80001e8:	f001 fb2b 	bl	8001842 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	f04f 33ff 	mov.w	r3, #4294967295
 80001f4:	6879      	ldr	r1, [r7, #4]
 80001f6:	4804      	ldr	r0, [pc, #16]	; (8000208 <ST7735_WriteData+0x30>)
 80001f8:	f001 ffaa 	bl	8002150 <HAL_SPI_Transmit>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40010c00 	.word	0x40010c00
 8000208:	200000f8 	.word	0x200000f8

0800020c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	1c5a      	adds	r2, r3, #1
 8000218:	607a      	str	r2, [r7, #4]
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800021e:	e034      	b.n	800028a <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	1c5a      	adds	r2, r3, #1
 8000224:	607a      	str	r2, [r7, #4]
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800022a:	7afb      	ldrb	r3, [r7, #11]
 800022c:	4618      	mov	r0, r3
 800022e:	f7ff ffb9 	bl	80001a4 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	1c5a      	adds	r2, r3, #1
 8000236:	607a      	str	r2, [r7, #4]
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, HAL_Delay follows args
        ms = numArgs & Delay;
 800023c:	7abb      	ldrb	r3, [r7, #10]
 800023e:	b29b      	uxth	r3, r3
 8000240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000244:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~Delay;
 8000246:	7abb      	ldrb	r3, [r7, #10]
 8000248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800024c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800024e:	7abb      	ldrb	r3, [r7, #10]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d008      	beq.n	8000266 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000254:	7abb      	ldrb	r3, [r7, #10]
 8000256:	4619      	mov	r1, r3
 8000258:	6878      	ldr	r0, [r7, #4]
 800025a:	f7ff ffbd 	bl	80001d8 <ST7735_WriteData>
            addr += numArgs;
 800025e:	7abb      	ldrb	r3, [r7, #10]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	4413      	add	r3, r2
 8000264:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000266:	89bb      	ldrh	r3, [r7, #12]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d00e      	beq.n	800028a <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	1c5a      	adds	r2, r3, #1
 8000270:	607a      	str	r2, [r7, #4]
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000276:	89bb      	ldrh	r3, [r7, #12]
 8000278:	2bff      	cmp	r3, #255	; 0xff
 800027a:	d102      	bne.n	8000282 <ST7735_ExecuteCommandList+0x76>
 800027c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000280:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000282:	89bb      	ldrh	r3, [r7, #12]
 8000284:	4618      	mov	r0, r3
 8000286:	f001 f865 	bl	8001354 <HAL_Delay>
    while(numCommands--) {
 800028a:	7bfb      	ldrb	r3, [r7, #15]
 800028c:	1e5a      	subs	r2, r3, #1
 800028e:	73fa      	strb	r2, [r7, #15]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d1c5      	bne.n	8000220 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000294:	bf00      	nop
 8000296:	3710      	adds	r7, #16
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4604      	mov	r4, r0
 80002a4:	4608      	mov	r0, r1
 80002a6:	4611      	mov	r1, r2
 80002a8:	461a      	mov	r2, r3
 80002aa:	4623      	mov	r3, r4
 80002ac:	71fb      	strb	r3, [r7, #7]
 80002ae:	4603      	mov	r3, r0
 80002b0:	71bb      	strb	r3, [r7, #6]
 80002b2:	460b      	mov	r3, r1
 80002b4:	717b      	strb	r3, [r7, #5]
 80002b6:	4613      	mov	r3, r2
 80002b8:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80002ba:	202a      	movs	r0, #42	; 0x2a
 80002bc:	f7ff ff72 	bl	80001a4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80002c0:	2300      	movs	r3, #0
 80002c2:	733b      	strb	r3, [r7, #12]
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	3301      	adds	r3, #1
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	737b      	strb	r3, [r7, #13]
 80002cc:	2300      	movs	r3, #0
 80002ce:	73bb      	strb	r3, [r7, #14]
 80002d0:	797b      	ldrb	r3, [r7, #5]
 80002d2:	3301      	adds	r3, #1
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80002d8:	f107 030c 	add.w	r3, r7, #12
 80002dc:	2104      	movs	r1, #4
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ff7a 	bl	80001d8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80002e4:	202b      	movs	r0, #43	; 0x2b
 80002e6:	f7ff ff5d 	bl	80001a4 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80002ea:	79bb      	ldrb	r3, [r7, #6]
 80002ec:	331a      	adds	r3, #26
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80002f2:	793b      	ldrb	r3, [r7, #4]
 80002f4:	331a      	adds	r3, #26
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80002fa:	f107 030c 	add.w	r3, r7, #12
 80002fe:	2104      	movs	r1, #4
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff69 	bl	80001d8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000306:	202c      	movs	r0, #44	; 0x2c
 8000308:	f7ff ff4c 	bl	80001a4 <ST7735_WriteCommand>
}
 800030c:	bf00      	nop
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	bd90      	pop	{r4, r7, pc}

08000314 <ST7735_Init>:

void ST7735_Init() {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000318:	f7ff ff18 	bl	800014c <ST7735_Select>
    ST7735_Reset();
 800031c:	f7ff ff2e 	bl	800017c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000320:	4806      	ldr	r0, [pc, #24]	; (800033c <ST7735_Init+0x28>)
 8000322:	f7ff ff73 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000326:	4806      	ldr	r0, [pc, #24]	; (8000340 <ST7735_Init+0x2c>)
 8000328:	f7ff ff70 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 800032c:	4805      	ldr	r0, [pc, #20]	; (8000344 <ST7735_Init+0x30>)
 800032e:	f7ff ff6d 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000332:	f7ff ff17 	bl	8000164 <ST7735_Unselect>
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	080036d4 	.word	0x080036d4
 8000340:	08003710 	.word	0x08003710
 8000344:	08003720 	.word	0x08003720

08000348 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	80fb      	strh	r3, [r7, #6]
 8000352:	460b      	mov	r3, r1
 8000354:	80bb      	strh	r3, [r7, #4]
 8000356:	4613      	mov	r3, r2
 8000358:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 800035a:	88fb      	ldrh	r3, [r7, #6]
 800035c:	2b9f      	cmp	r3, #159	; 0x9f
 800035e:	d823      	bhi.n	80003a8 <ST7735_DrawPixel+0x60>
 8000360:	88bb      	ldrh	r3, [r7, #4]
 8000362:	2b4f      	cmp	r3, #79	; 0x4f
 8000364:	d820      	bhi.n	80003a8 <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 8000366:	f7ff fef1 	bl	800014c <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800036a:	88fb      	ldrh	r3, [r7, #6]
 800036c:	b2d8      	uxtb	r0, r3
 800036e:	88bb      	ldrh	r3, [r7, #4]
 8000370:	b2d9      	uxtb	r1, r3
 8000372:	88fb      	ldrh	r3, [r7, #6]
 8000374:	b2db      	uxtb	r3, r3
 8000376:	3301      	adds	r3, #1
 8000378:	b2da      	uxtb	r2, r3
 800037a:	88bb      	ldrh	r3, [r7, #4]
 800037c:	b2db      	uxtb	r3, r3
 800037e:	3301      	adds	r3, #1
 8000380:	b2db      	uxtb	r3, r3
 8000382:	f7ff ff8b 	bl	800029c <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000386:	887b      	ldrh	r3, [r7, #2]
 8000388:	0a1b      	lsrs	r3, r3, #8
 800038a:	b29b      	uxth	r3, r3
 800038c:	b2db      	uxtb	r3, r3
 800038e:	733b      	strb	r3, [r7, #12]
 8000390:	887b      	ldrh	r3, [r7, #2]
 8000392:	b2db      	uxtb	r3, r3
 8000394:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8000396:	f107 030c 	add.w	r3, r7, #12
 800039a:	2102      	movs	r1, #2
 800039c:	4618      	mov	r0, r3
 800039e:	f7ff ff1b 	bl	80001d8 <ST7735_WriteData>

    ST7735_Unselect();
 80003a2:	f7ff fedf 	bl	8000164 <ST7735_Unselect>
 80003a6:	e000      	b.n	80003aa <ST7735_DrawPixel+0x62>
        return;
 80003a8:	bf00      	nop
}
 80003aa:	3710      	adds	r7, #16
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80003b0:	b082      	sub	sp, #8
 80003b2:	b590      	push	{r4, r7, lr}
 80003b4:	b089      	sub	sp, #36	; 0x24
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	637b      	str	r3, [r7, #52]	; 0x34
 80003ba:	4603      	mov	r3, r0
 80003bc:	80fb      	strh	r3, [r7, #6]
 80003be:	460b      	mov	r3, r1
 80003c0:	80bb      	strh	r3, [r7, #4]
 80003c2:	4613      	mov	r3, r2
 80003c4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80003c6:	88fb      	ldrh	r3, [r7, #6]
 80003c8:	b2d8      	uxtb	r0, r3
 80003ca:	88bb      	ldrh	r3, [r7, #4]
 80003cc:	b2d9      	uxtb	r1, r3
 80003ce:	88fb      	ldrh	r3, [r7, #6]
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80003d6:	4413      	add	r3, r2
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	3b01      	subs	r3, #1
 80003dc:	b2dc      	uxtb	r4, r3
 80003de:	88bb      	ldrh	r3, [r7, #4]
 80003e0:	b2da      	uxtb	r2, r3
 80003e2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80003e6:	4413      	add	r3, r2
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	3b01      	subs	r3, #1
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	4622      	mov	r2, r4
 80003f0:	f7ff ff54 	bl	800029c <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80003f4:	2300      	movs	r3, #0
 80003f6:	61fb      	str	r3, [r7, #28]
 80003f8:	e043      	b.n	8000482 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80003fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80003fc:	78fb      	ldrb	r3, [r7, #3]
 80003fe:	3b20      	subs	r3, #32
 8000400:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000404:	fb01 f303 	mul.w	r3, r1, r3
 8000408:	4619      	mov	r1, r3
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	440b      	add	r3, r1
 800040e:	005b      	lsls	r3, r3, #1
 8000410:	4413      	add	r3, r2
 8000412:	881b      	ldrh	r3, [r3, #0]
 8000414:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000416:	2300      	movs	r3, #0
 8000418:	61bb      	str	r3, [r7, #24]
 800041a:	e029      	b.n	8000470 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800041c:	697a      	ldr	r2, [r7, #20]
 800041e:	69bb      	ldr	r3, [r7, #24]
 8000420:	fa02 f303 	lsl.w	r3, r2, r3
 8000424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000428:	2b00      	cmp	r3, #0
 800042a:	d00e      	beq.n	800044a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800042c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	b29b      	uxth	r3, r3
 8000432:	b2db      	uxtb	r3, r3
 8000434:	743b      	strb	r3, [r7, #16]
 8000436:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000438:	b2db      	uxtb	r3, r3
 800043a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	2102      	movs	r1, #2
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff fec8 	bl	80001d8 <ST7735_WriteData>
 8000448:	e00f      	b.n	800046a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800044a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800044e:	0a1b      	lsrs	r3, r3, #8
 8000450:	b29b      	uxth	r3, r3
 8000452:	b2db      	uxtb	r3, r3
 8000454:	733b      	strb	r3, [r7, #12]
 8000456:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800045a:	b2db      	uxtb	r3, r3
 800045c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800045e:	f107 030c 	add.w	r3, r7, #12
 8000462:	2102      	movs	r1, #2
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff feb7 	bl	80001d8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800046a:	69bb      	ldr	r3, [r7, #24]
 800046c:	3301      	adds	r3, #1
 800046e:	61bb      	str	r3, [r7, #24]
 8000470:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000474:	461a      	mov	r2, r3
 8000476:	69bb      	ldr	r3, [r7, #24]
 8000478:	4293      	cmp	r3, r2
 800047a:	d3cf      	bcc.n	800041c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 800047c:	69fb      	ldr	r3, [r7, #28]
 800047e:	3301      	adds	r3, #1
 8000480:	61fb      	str	r3, [r7, #28]
 8000482:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000486:	461a      	mov	r2, r3
 8000488:	69fb      	ldr	r3, [r7, #28]
 800048a:	4293      	cmp	r3, r2
 800048c:	d3b5      	bcc.n	80003fa <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800048e:	bf00      	nop
 8000490:	3724      	adds	r7, #36	; 0x24
 8000492:	46bd      	mov	sp, r7
 8000494:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000498:	b002      	add	sp, #8
 800049a:	4770      	bx	lr

0800049c <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800049c:	b082      	sub	sp, #8
 800049e:	b580      	push	{r7, lr}
 80004a0:	b086      	sub	sp, #24
 80004a2:	af04      	add	r7, sp, #16
 80004a4:	603a      	str	r2, [r7, #0]
 80004a6:	617b      	str	r3, [r7, #20]
 80004a8:	4603      	mov	r3, r0
 80004aa:	80fb      	strh	r3, [r7, #6]
 80004ac:	460b      	mov	r3, r1
 80004ae:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80004b0:	f7ff fe4c 	bl	800014c <ST7735_Select>

    while(*str) {
 80004b4:	e02d      	b.n	8000512 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80004b6:	88fb      	ldrh	r3, [r7, #6]
 80004b8:	7d3a      	ldrb	r2, [r7, #20]
 80004ba:	4413      	add	r3, r2
 80004bc:	2b9f      	cmp	r3, #159	; 0x9f
 80004be:	dd13      	ble.n	80004e8 <ST7735_WriteString+0x4c>
            x = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80004c4:	7d7b      	ldrb	r3, [r7, #21]
 80004c6:	b29a      	uxth	r2, r3
 80004c8:	88bb      	ldrh	r3, [r7, #4]
 80004ca:	4413      	add	r3, r2
 80004cc:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80004ce:	88bb      	ldrh	r3, [r7, #4]
 80004d0:	7d7a      	ldrb	r2, [r7, #21]
 80004d2:	4413      	add	r3, r2
 80004d4:	2b4f      	cmp	r3, #79	; 0x4f
 80004d6:	dc21      	bgt.n	800051c <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b20      	cmp	r3, #32
 80004de:	d103      	bne.n	80004e8 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	3301      	adds	r3, #1
 80004e4:	603b      	str	r3, [r7, #0]
                continue;
 80004e6:	e014      	b.n	8000512 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	781a      	ldrb	r2, [r3, #0]
 80004ec:	88b9      	ldrh	r1, [r7, #4]
 80004ee:	88f8      	ldrh	r0, [r7, #6]
 80004f0:	8c3b      	ldrh	r3, [r7, #32]
 80004f2:	9302      	str	r3, [sp, #8]
 80004f4:	8bbb      	ldrh	r3, [r7, #28]
 80004f6:	9301      	str	r3, [sp, #4]
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	f7ff ff57 	bl	80003b0 <ST7735_WriteChar>
        x += font.width;
 8000502:	7d3b      	ldrb	r3, [r7, #20]
 8000504:	b29a      	uxth	r2, r3
 8000506:	88fb      	ldrh	r3, [r7, #6]
 8000508:	4413      	add	r3, r2
 800050a:	80fb      	strh	r3, [r7, #6]
        str++;
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	3301      	adds	r3, #1
 8000510:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d1cd      	bne.n	80004b6 <ST7735_WriteString+0x1a>
 800051a:	e000      	b.n	800051e <ST7735_WriteString+0x82>
                break;
 800051c:	bf00      	nop
    }

    ST7735_Unselect();
 800051e:	f7ff fe21 	bl	8000164 <ST7735_Unselect>
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800052c:	b002      	add	sp, #8
 800052e:	4770      	bx	lr

08000530 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	4604      	mov	r4, r0
 8000538:	4608      	mov	r0, r1
 800053a:	4611      	mov	r1, r2
 800053c:	461a      	mov	r2, r3
 800053e:	4623      	mov	r3, r4
 8000540:	80fb      	strh	r3, [r7, #6]
 8000542:	4603      	mov	r3, r0
 8000544:	80bb      	strh	r3, [r7, #4]
 8000546:	460b      	mov	r3, r1
 8000548:	807b      	strh	r3, [r7, #2]
 800054a:	4613      	mov	r3, r2
 800054c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800054e:	88fb      	ldrh	r3, [r7, #6]
 8000550:	2b9f      	cmp	r3, #159	; 0x9f
 8000552:	d859      	bhi.n	8000608 <ST7735_FillRectangle+0xd8>
 8000554:	88bb      	ldrh	r3, [r7, #4]
 8000556:	2b4f      	cmp	r3, #79	; 0x4f
 8000558:	d856      	bhi.n	8000608 <ST7735_FillRectangle+0xd8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800055a:	88fa      	ldrh	r2, [r7, #6]
 800055c:	887b      	ldrh	r3, [r7, #2]
 800055e:	4413      	add	r3, r2
 8000560:	3b01      	subs	r3, #1
 8000562:	2b9f      	cmp	r3, #159	; 0x9f
 8000564:	dd03      	ble.n	800056e <ST7735_FillRectangle+0x3e>
 8000566:	88fb      	ldrh	r3, [r7, #6]
 8000568:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 800056c:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800056e:	88ba      	ldrh	r2, [r7, #4]
 8000570:	883b      	ldrh	r3, [r7, #0]
 8000572:	4413      	add	r3, r2
 8000574:	3b01      	subs	r3, #1
 8000576:	2b4f      	cmp	r3, #79	; 0x4f
 8000578:	dd03      	ble.n	8000582 <ST7735_FillRectangle+0x52>
 800057a:	88bb      	ldrh	r3, [r7, #4]
 800057c:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8000580:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000582:	f7ff fde3 	bl	800014c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	b2d8      	uxtb	r0, r3
 800058a:	88bb      	ldrh	r3, [r7, #4]
 800058c:	b2d9      	uxtb	r1, r3
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	b2da      	uxtb	r2, r3
 8000592:	887b      	ldrh	r3, [r7, #2]
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4413      	add	r3, r2
 8000598:	b2db      	uxtb	r3, r3
 800059a:	3b01      	subs	r3, #1
 800059c:	b2dc      	uxtb	r4, r3
 800059e:	88bb      	ldrh	r3, [r7, #4]
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	883b      	ldrh	r3, [r7, #0]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	4413      	add	r3, r2
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	3b01      	subs	r3, #1
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	4622      	mov	r2, r4
 80005b0:	f7ff fe74 	bl	800029c <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80005b4:	8c3b      	ldrh	r3, [r7, #32]
 80005b6:	0a1b      	lsrs	r3, r3, #8
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	733b      	strb	r3, [r7, #12]
 80005be:	8c3b      	ldrh	r3, [r7, #32]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	2101      	movs	r1, #1
 80005c8:	4811      	ldr	r0, [pc, #68]	; (8000610 <ST7735_FillRectangle+0xe0>)
 80005ca:	f001 f93a 	bl	8001842 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80005ce:	883b      	ldrh	r3, [r7, #0]
 80005d0:	80bb      	strh	r3, [r7, #4]
 80005d2:	e013      	b.n	80005fc <ST7735_FillRectangle+0xcc>
        for(x = w; x > 0; x--) {
 80005d4:	887b      	ldrh	r3, [r7, #2]
 80005d6:	80fb      	strh	r3, [r7, #6]
 80005d8:	e00a      	b.n	80005f0 <ST7735_FillRectangle+0xc0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80005da:	f107 010c 	add.w	r1, r7, #12
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	2202      	movs	r2, #2
 80005e4:	480b      	ldr	r0, [pc, #44]	; (8000614 <ST7735_FillRectangle+0xe4>)
 80005e6:	f001 fdb3 	bl	8002150 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	3b01      	subs	r3, #1
 80005ee:	80fb      	strh	r3, [r7, #6]
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d1f1      	bne.n	80005da <ST7735_FillRectangle+0xaa>
    for(y = h; y > 0; y--) {
 80005f6:	88bb      	ldrh	r3, [r7, #4]
 80005f8:	3b01      	subs	r3, #1
 80005fa:	80bb      	strh	r3, [r7, #4]
 80005fc:	88bb      	ldrh	r3, [r7, #4]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1e8      	bne.n	80005d4 <ST7735_FillRectangle+0xa4>
        }
    }

    ST7735_Unselect();
 8000602:	f7ff fdaf 	bl	8000164 <ST7735_Unselect>
 8000606:	e000      	b.n	800060a <ST7735_FillRectangle+0xda>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000608:	bf00      	nop
}
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	bd90      	pop	{r4, r7, pc}
 8000610:	40010c00 	.word	0x40010c00
 8000614:	200000f8 	.word	0x200000f8

08000618 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af02      	add	r7, sp, #8
 800061e:	4603      	mov	r3, r0
 8000620:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2350      	movs	r3, #80	; 0x50
 8000628:	22a0      	movs	r2, #160	; 0xa0
 800062a:	2100      	movs	r1, #0
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff ff7f 	bl	8000530 <ST7735_FillRectangle>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <ST7735_DrawLine>:
	ST7735_WriteCommand(ST7735_GAMSET);
	ST7735_WriteData((uint8_t *) &gamma, sizeof(gamma));
	ST7735_Unselect();
}

void ST7735_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color){
 800063a:	b590      	push	{r4, r7, lr}
 800063c:	b087      	sub	sp, #28
 800063e:	af00      	add	r7, sp, #0
 8000640:	4604      	mov	r4, r0
 8000642:	4608      	mov	r0, r1
 8000644:	4611      	mov	r1, r2
 8000646:	461a      	mov	r2, r3
 8000648:	4623      	mov	r3, r4
 800064a:	80fb      	strh	r3, [r7, #6]
 800064c:	4603      	mov	r3, r0
 800064e:	80bb      	strh	r3, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]
 8000654:	4613      	mov	r3, r2
 8000656:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
	    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 8000658:	883a      	ldrh	r2, [r7, #0]
 800065a:	88bb      	ldrh	r3, [r7, #4]
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000662:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000666:	8879      	ldrh	r1, [r7, #2]
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	1acb      	subs	r3, r1, r3
 800066c:	2b00      	cmp	r3, #0
 800066e:	bfb8      	it	lt
 8000670:	425b      	neglt	r3, r3
 8000672:	429a      	cmp	r2, r3
 8000674:	bfcc      	ite	gt
 8000676:	2301      	movgt	r3, #1
 8000678:	2300      	movle	r3, #0
 800067a:	b2db      	uxtb	r3, r3
 800067c:	827b      	strh	r3, [r7, #18]
	    if (steep) {
 800067e:	8a7b      	ldrh	r3, [r7, #18]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d00b      	beq.n	800069c <ST7735_DrawLine+0x62>
			swap = x0;
 8000684:	88fb      	ldrh	r3, [r7, #6]
 8000686:	823b      	strh	r3, [r7, #16]
			x0 = y0;
 8000688:	88bb      	ldrh	r3, [r7, #4]
 800068a:	80fb      	strh	r3, [r7, #6]
			y0 = swap;
 800068c:	8a3b      	ldrh	r3, [r7, #16]
 800068e:	80bb      	strh	r3, [r7, #4]

			swap = x1;
 8000690:	887b      	ldrh	r3, [r7, #2]
 8000692:	823b      	strh	r3, [r7, #16]
			x1 = y1;
 8000694:	883b      	ldrh	r3, [r7, #0]
 8000696:	807b      	strh	r3, [r7, #2]
			y1 = swap;
 8000698:	8a3b      	ldrh	r3, [r7, #16]
 800069a:	803b      	strh	r3, [r7, #0]
	        //_swap_int16_t(x0, y0);
	        //_swap_int16_t(x1, y1);
	    }

	    if (x0 > x1) {
 800069c:	88fa      	ldrh	r2, [r7, #6]
 800069e:	887b      	ldrh	r3, [r7, #2]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d90b      	bls.n	80006bc <ST7735_DrawLine+0x82>
			swap = x0;
 80006a4:	88fb      	ldrh	r3, [r7, #6]
 80006a6:	823b      	strh	r3, [r7, #16]
			x0 = x1;
 80006a8:	887b      	ldrh	r3, [r7, #2]
 80006aa:	80fb      	strh	r3, [r7, #6]
			x1 = swap;
 80006ac:	8a3b      	ldrh	r3, [r7, #16]
 80006ae:	807b      	strh	r3, [r7, #2]

			swap = y0;
 80006b0:	88bb      	ldrh	r3, [r7, #4]
 80006b2:	823b      	strh	r3, [r7, #16]
			y0 = y1;
 80006b4:	883b      	ldrh	r3, [r7, #0]
 80006b6:	80bb      	strh	r3, [r7, #4]
			y1 = swap;
 80006b8:	8a3b      	ldrh	r3, [r7, #16]
 80006ba:	803b      	strh	r3, [r7, #0]
	        //_swap_int16_t(x0, x1);
	        //_swap_int16_t(y0, y1);
	    }

	    int16_t dx, dy;
	    dx = x1 - x0;
 80006bc:	887a      	ldrh	r2, [r7, #2]
 80006be:	88fb      	ldrh	r3, [r7, #6]
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	81fb      	strh	r3, [r7, #14]
	    dy = ABS(y1 - y0);
 80006c6:	883a      	ldrh	r2, [r7, #0]
 80006c8:	88bb      	ldrh	r3, [r7, #4]
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	bfb8      	it	lt
 80006d0:	425b      	neglt	r3, r3
 80006d2:	81bb      	strh	r3, [r7, #12]

	    int16_t err = dx / 2;
 80006d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006d8:	0fda      	lsrs	r2, r3, #31
 80006da:	4413      	add	r3, r2
 80006dc:	105b      	asrs	r3, r3, #1
 80006de:	82fb      	strh	r3, [r7, #22]
	    int16_t ystep;

	    if (y0 < y1) {
 80006e0:	88ba      	ldrh	r2, [r7, #4]
 80006e2:	883b      	ldrh	r3, [r7, #0]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d202      	bcs.n	80006ee <ST7735_DrawLine+0xb4>
	        ystep = 1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	82bb      	strh	r3, [r7, #20]
 80006ec:	e028      	b.n	8000740 <ST7735_DrawLine+0x106>
	    } else {
	        ystep = -1;
 80006ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006f2:	82bb      	strh	r3, [r7, #20]
	    }

	    for (; x0<=x1; x0++) {
 80006f4:	e024      	b.n	8000740 <ST7735_DrawLine+0x106>
	        if (steep) {
 80006f6:	8a7b      	ldrh	r3, [r7, #18]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d006      	beq.n	800070a <ST7735_DrawLine+0xd0>
	            ST7735_DrawPixel(y0, x0, color);
 80006fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80006fe:	88f9      	ldrh	r1, [r7, #6]
 8000700:	88bb      	ldrh	r3, [r7, #4]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fe20 	bl	8000348 <ST7735_DrawPixel>
 8000708:	e005      	b.n	8000716 <ST7735_DrawLine+0xdc>
	        } else {
	        	ST7735_DrawPixel(x0, y0, color);
 800070a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800070c:	88b9      	ldrh	r1, [r7, #4]
 800070e:	88fb      	ldrh	r3, [r7, #6]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff fe19 	bl	8000348 <ST7735_DrawPixel>
	        }
	        err -= dy;
 8000716:	8afa      	ldrh	r2, [r7, #22]
 8000718:	89bb      	ldrh	r3, [r7, #12]
 800071a:	1ad3      	subs	r3, r2, r3
 800071c:	b29b      	uxth	r3, r3
 800071e:	82fb      	strh	r3, [r7, #22]
	        if (err < 0) {
 8000720:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000724:	2b00      	cmp	r3, #0
 8000726:	da08      	bge.n	800073a <ST7735_DrawLine+0x100>
	            y0 += ystep;
 8000728:	8aba      	ldrh	r2, [r7, #20]
 800072a:	88bb      	ldrh	r3, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	80bb      	strh	r3, [r7, #4]
	            err += dx;
 8000730:	8afa      	ldrh	r2, [r7, #22]
 8000732:	89fb      	ldrh	r3, [r7, #14]
 8000734:	4413      	add	r3, r2
 8000736:	b29b      	uxth	r3, r3
 8000738:	82fb      	strh	r3, [r7, #22]
	    for (; x0<=x1; x0++) {
 800073a:	88fb      	ldrh	r3, [r7, #6]
 800073c:	3301      	adds	r3, #1
 800073e:	80fb      	strh	r3, [r7, #6]
 8000740:	88fa      	ldrh	r2, [r7, #6]
 8000742:	887b      	ldrh	r3, [r7, #2]
 8000744:	429a      	cmp	r2, r3
 8000746:	d9d6      	bls.n	80006f6 <ST7735_DrawLine+0xbc>
	        }
	    }
}
 8000748:	bf00      	nop
 800074a:	371c      	adds	r7, #28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd90      	pop	{r4, r7, pc}

08000750 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000754:	f000 fd9c 	bl	8001290 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000758:	f000 f810 	bl	800077c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800075c:	f000 f882 	bl	8000864 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000760:	f000 f848 	bl	80007f4 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	ST7735_Init();
 8000764:	f7ff fdd6 	bl	8000314 <ST7735_Init>


	//Square();

	while (1) {
		a1 = 2;
 8000768:	4b03      	ldr	r3, [pc, #12]	; (8000778 <main+0x28>)
 800076a:	2202      	movs	r2, #2
 800076c:	601a      	str	r2, [r3, #0]

		Start();
 800076e:	f000 f8d9 	bl	8000924 <Start>
		Navegacao();
 8000772:	f000 fb43 	bl	8000dfc <Navegacao>
		a1 = 2;
 8000776:	e7f7      	b.n	8000768 <main+0x18>
 8000778:	20000008 	.word	0x20000008

0800077c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b090      	sub	sp, #64	; 0x40
 8000780:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000782:	f107 0318 	add.w	r3, r7, #24
 8000786:	2228      	movs	r2, #40	; 0x28
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f001 fef4 	bl	8002578 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079e:	2302      	movs	r3, #2
 80007a0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a2:	2301      	movs	r3, #1
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a6:	2310      	movs	r3, #16
 80007a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007ae:	f107 0318 	add.w	r3, r7, #24
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 f85e 	bl	8001874 <HAL_RCC_OscConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x46>
		Error_Handler();
 80007be:	f000 fc69 	bl	8001094 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007c2:	230f      	movs	r3, #15
 80007c4:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 faca 	bl	8001d74 <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x6e>
		Error_Handler();
 80007e6:	f000 fc55 	bl	8001094 <Error_Handler>
	}
}
 80007ea:	bf00      	nop
 80007ec:	3740      	adds	r7, #64	; 0x40
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_SPI1_Init+0x68>)
 80007fa:	4a19      	ldr	r2, [pc, #100]	; (8000860 <MX_SPI1_Init+0x6c>)
 80007fc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_SPI1_Init+0x68>)
 8000800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000804:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_SPI1_Init+0x68>)
 8000808:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800080c:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_SPI1_Init+0x68>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_SPI1_Init+0x68>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_SPI1_Init+0x68>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_SPI1_Init+0x68>)
 8000822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000826:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_SPI1_Init+0x68>)
 800082a:	2220      	movs	r2, #32
 800082c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_SPI1_Init+0x68>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_SPI1_Init+0x68>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_SPI1_Init+0x68>)
 800083c:	2200      	movs	r2, #0
 800083e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_SPI1_Init+0x68>)
 8000842:	220a      	movs	r2, #10
 8000844:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_SPI1_Init+0x68>)
 8000848:	f001 fbfe 	bl	8002048 <HAL_SPI_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_SPI1_Init+0x62>
		Error_Handler();
 8000852:	f000 fc1f 	bl	8001094 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000f8 	.word	0x200000f8
 8000860:	40013000 	.word	0x40013000

08000864 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000878:	4b27      	ldr	r3, [pc, #156]	; (8000918 <MX_GPIO_Init+0xb4>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a26      	ldr	r2, [pc, #152]	; (8000918 <MX_GPIO_Init+0xb4>)
 800087e:	f043 0304 	orr.w	r3, r3, #4
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b24      	ldr	r3, [pc, #144]	; (8000918 <MX_GPIO_Init+0xb4>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0304 	and.w	r3, r3, #4
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000890:	4b21      	ldr	r3, [pc, #132]	; (8000918 <MX_GPIO_Init+0xb4>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	4a20      	ldr	r2, [pc, #128]	; (8000918 <MX_GPIO_Init+0xb4>)
 8000896:	f043 0308 	orr.w	r3, r3, #8
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <MX_GPIO_Init+0xb4>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f003 0308 	and.w	r3, r3, #8
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2110      	movs	r1, #16
 80008ac:	481b      	ldr	r0, [pc, #108]	; (800091c <MX_GPIO_Init+0xb8>)
 80008ae:	f000 ffc8 	bl	8001842 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80008b2:	2200      	movs	r2, #0
 80008b4:	217b      	movs	r1, #123	; 0x7b
 80008b6:	481a      	ldr	r0, [pc, #104]	; (8000920 <MX_GPIO_Init+0xbc>)
 80008b8:	f000 ffc3 	bl	8001842 <HAL_GPIO_WritePin>
			ST7735_DC_Pin | ST7735_RES_Pin | GPIO_PIN_3 | GPIO_PIN_4
					| GPIO_PIN_5 | GPIO_PIN_6, GPIO_PIN_RESET);

	/*Configure GPIO pin : ST7735_CS_Pin */
	GPIO_InitStruct.Pin = ST7735_CS_Pin;
 80008bc:	2310      	movs	r3, #16
 80008be:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2302      	movs	r3, #2
 80008ca:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(ST7735_CS_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	4619      	mov	r1, r3
 80008d2:	4812      	ldr	r0, [pc, #72]	; (800091c <MX_GPIO_Init+0xb8>)
 80008d4:	f000 fe44 	bl	8001560 <HAL_GPIO_Init>

	/*Configure GPIO pins : ST7735_DC_Pin ST7735_RES_Pin PB3 PB4
	 PB5 PB6 */
	GPIO_InitStruct.Pin = ST7735_DC_Pin | ST7735_RES_Pin | GPIO_PIN_3
 80008d8:	237b      	movs	r3, #123	; 0x7b
 80008da:	60bb      	str	r3, [r7, #8]
			| GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2302      	movs	r3, #2
 80008e6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	4619      	mov	r1, r3
 80008ee:	480c      	ldr	r0, [pc, #48]	; (8000920 <MX_GPIO_Init+0xbc>)
 80008f0:	f000 fe36 	bl	8001560 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA9 PA10 PA11 PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80008f4:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80008f8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fe:	2301      	movs	r3, #1
 8000900:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	4619      	mov	r1, r3
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_GPIO_Init+0xb8>)
 800090a:	f000 fe29 	bl	8001560 <HAL_GPIO_Init>

}
 800090e:	bf00      	nop
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000
 800091c:	40010800 	.word	0x40010800
 8000920:	40010c00 	.word	0x40010c00

08000924 <Start>:
 int x = atoi(s);
 //itoa conversao de int para impressao da string
 }*/


void Start(void) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af04      	add	r7, sp, #16

	ST7735_FillScreen(BLACK);
 800092a:	2000      	movs	r0, #0
 800092c:	f7ff fe74 	bl	8000618 <ST7735_FillScreen>
	while(a1 == 2){
 8000930:	e09a      	b.n	8000a68 <Start+0x144>
	/*bomba eh uma variavel que salva a ultima alteracao, podendo ser de if ou else if*/

	ST7735_WriteString(40, 15, "MENU ESCOLHA", Font_7x10, WHITE, BLACK);
 8000932:	4b51      	ldr	r3, [pc, #324]	; (8000a78 <Start+0x154>)
 8000934:	2200      	movs	r2, #0
 8000936:	9202      	str	r2, [sp, #8]
 8000938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800093c:	9201      	str	r2, [sp, #4]
 800093e:	685a      	ldr	r2, [r3, #4]
 8000940:	9200      	str	r2, [sp, #0]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a4d      	ldr	r2, [pc, #308]	; (8000a7c <Start+0x158>)
 8000946:	210f      	movs	r1, #15
 8000948:	2028      	movs	r0, #40	; 0x28
 800094a:	f7ff fda7 	bl	800049c <ST7735_WriteString>
	ST7735_WriteString(4, 30, "quant de bombas: ", Font_7x10, WHITE, BLACK);
 800094e:	4b4a      	ldr	r3, [pc, #296]	; (8000a78 <Start+0x154>)
 8000950:	2200      	movs	r2, #0
 8000952:	9202      	str	r2, [sp, #8]
 8000954:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000958:	9201      	str	r2, [sp, #4]
 800095a:	685a      	ldr	r2, [r3, #4]
 800095c:	9200      	str	r2, [sp, #0]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a47      	ldr	r2, [pc, #284]	; (8000a80 <Start+0x15c>)
 8000962:	211e      	movs	r1, #30
 8000964:	2004      	movs	r0, #4
 8000966:	f7ff fd99 	bl	800049c <ST7735_WriteString>
	ST7735_WriteString(4, 45, "Recomenda-se: 5", Font_7x10, WHITE, BLACK);
 800096a:	4b43      	ldr	r3, [pc, #268]	; (8000a78 <Start+0x154>)
 800096c:	2200      	movs	r2, #0
 800096e:	9202      	str	r2, [sp, #8]
 8000970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000974:	9201      	str	r2, [sp, #4]
 8000976:	685a      	ldr	r2, [r3, #4]
 8000978:	9200      	str	r2, [sp, #0]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a41      	ldr	r2, [pc, #260]	; (8000a84 <Start+0x160>)
 800097e:	212d      	movs	r1, #45	; 0x2d
 8000980:	2004      	movs	r0, #4
 8000982:	f7ff fd8b 	bl	800049c <ST7735_WriteString>
	ST7735_WriteString(4, 60, "quant. escolhida: ", Font_7x10, WHITE, BLACK);
 8000986:	4b3c      	ldr	r3, [pc, #240]	; (8000a78 <Start+0x154>)
 8000988:	2200      	movs	r2, #0
 800098a:	9202      	str	r2, [sp, #8]
 800098c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000990:	9201      	str	r2, [sp, #4]
 8000992:	685a      	ldr	r2, [r3, #4]
 8000994:	9200      	str	r2, [sp, #0]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a3b      	ldr	r2, [pc, #236]	; (8000a88 <Start+0x164>)
 800099a:	213c      	movs	r1, #60	; 0x3c
 800099c:	2004      	movs	r0, #4
 800099e:	f7ff fd7d 	bl	800049c <ST7735_WriteString>

	if (LE_BOTAO_CIMA == 0) {
 80009a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009a6:	4839      	ldr	r0, [pc, #228]	; (8000a8c <Start+0x168>)
 80009a8:	f000 ff34 	bl	8001814 <HAL_GPIO_ReadPin>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d109      	bne.n	80009c6 <Start+0xa2>

		contBomba++;
 80009b2:	4b37      	ldr	r3, [pc, #220]	; (8000a90 <Start+0x16c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	3301      	adds	r3, #1
 80009b8:	4a35      	ldr	r2, [pc, #212]	; (8000a90 <Start+0x16c>)
 80009ba:	6013      	str	r3, [r2, #0]
		bomba_bandeira = contBomba;
 80009bc:	4b34      	ldr	r3, [pc, #208]	; (8000a90 <Start+0x16c>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a34      	ldr	r2, [pc, #208]	; (8000a94 <Start+0x170>)
 80009c2:	6013      	str	r3, [r2, #0]
 80009c4:	e018      	b.n	80009f8 <Start+0xd4>
	}

	else if (LE_BOTAO_BAIXO == 0) {
 80009c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ca:	4830      	ldr	r0, [pc, #192]	; (8000a8c <Start+0x168>)
 80009cc:	f000 ff22 	bl	8001814 <HAL_GPIO_ReadPin>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d110      	bne.n	80009f8 <Start+0xd4>

		if(contBomba >= 1){
 80009d6:	4b2e      	ldr	r3, [pc, #184]	; (8000a90 <Start+0x16c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	dd09      	ble.n	80009f2 <Start+0xce>
		contBomba--;
 80009de:	4b2c      	ldr	r3, [pc, #176]	; (8000a90 <Start+0x16c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	4a2a      	ldr	r2, [pc, #168]	; (8000a90 <Start+0x16c>)
 80009e6:	6013      	str	r3, [r2, #0]
		bomba_bandeira = contBomba;
 80009e8:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <Start+0x16c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a29      	ldr	r2, [pc, #164]	; (8000a94 <Start+0x170>)
 80009ee:	6013      	str	r3, [r2, #0]
 80009f0:	e002      	b.n	80009f8 <Start+0xd4>

		}
		else{

			contBomba = 0;
 80009f2:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <Start+0x16c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
	}



	// Converter int para string usando a função sprintf
	sprintf(str, "%d", bomba_bandeira);
 80009f8:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <Start+0x170>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	4926      	ldr	r1, [pc, #152]	; (8000a98 <Start+0x174>)
 8000a00:	4826      	ldr	r0, [pc, #152]	; (8000a9c <Start+0x178>)
 8000a02:	f001 fecf 	bl	80027a4 <siprintf>
	// Agora 'str' contém a representação do número como string

	ST7735_WriteString(130, 60, str, Font_7x10, WHITE, BLACK);
 8000a06:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <Start+0x154>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	9202      	str	r2, [sp, #8]
 8000a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a10:	9201      	str	r2, [sp, #4]
 8000a12:	685a      	ldr	r2, [r3, #4]
 8000a14:	9200      	str	r2, [sp, #0]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a20      	ldr	r2, [pc, #128]	; (8000a9c <Start+0x178>)
 8000a1a:	213c      	movs	r1, #60	; 0x3c
 8000a1c:	2082      	movs	r0, #130	; 0x82
 8000a1e:	f7ff fd3d 	bl	800049c <ST7735_WriteString>

	 if (LE_BOTAO_DIREITO == 0) {//confirma escolha
 8000a22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a26:	4819      	ldr	r0, [pc, #100]	; (8000a8c <Start+0x168>)
 8000a28:	f000 fef4 	bl	8001814 <HAL_GPIO_ReadPin>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d11a      	bne.n	8000a68 <Start+0x144>

		ST7735_FillScreen(BLACK);
 8000a32:	2000      	movs	r0, #0
 8000a34:	f7ff fdf0 	bl	8000618 <ST7735_FillScreen>
		if (bomba_bandeira >= 1) {
 8000a38:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <Start+0x170>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	dd11      	ble.n	8000a64 <Start+0x140>

			x = 103;
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <Start+0x17c>)
 8000a42:	2267      	movs	r2, #103	; 0x67
 8000a44:	601a      	str	r2, [r3, #0]
			y = 20;
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <Start+0x180>)
 8000a48:	2214      	movs	r2, #20
 8000a4a:	601a      	str	r2, [r3, #0]
			xa = 5;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <Start+0x184>)
 8000a4e:	2205      	movs	r2, #5
 8000a50:	601a      	str	r2, [r3, #0]
			ya = 80;
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <Start+0x188>)
 8000a54:	2250      	movs	r2, #80	; 0x50
 8000a56:	601a      	str	r2, [r3, #0]
			Square();
 8000a58:	f000 f982 	bl	8000d60 <Square>
			a1 = 0;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <Start+0x18c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	e001      	b.n	8000a68 <Start+0x144>
		}
		else {
			Error();
 8000a64:	f000 f934 	bl	8000cd0 <Error>
	while(a1 == 2){
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <Start+0x18c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	f43f af60 	beq.w	8000932 <Start+0xe>
		}
	}
	}
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	08002edc 	.word	0x08002edc
 8000a80:	08002eec 	.word	0x08002eec
 8000a84:	08002f00 	.word	0x08002f00
 8000a88:	08002f10 	.word	0x08002f10
 8000a8c:	40010800 	.word	0x40010800
 8000a90:	200000b4 	.word	0x200000b4
 8000a94:	200000b0 	.word	0x200000b0
 8000a98:	08002f24 	.word	0x08002f24
 8000a9c:	20000150 	.word	0x20000150
 8000aa0:	2000000c 	.word	0x2000000c
 8000aa4:	20000010 	.word	0x20000010
 8000aa8:	20000014 	.word	0x20000014
 8000aac:	20000018 	.word	0x20000018
 8000ab0:	20000008 	.word	0x20000008

08000ab4 <Bomb>:


}


void Bomb(void){
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b0a7      	sub	sp, #156	; 0x9c
 8000ab8:	af00      	add	r7, sp, #0

    int tabu_bomb[4][6];
    int bomba_bandeira; // quantidade de 1's que o usuário deseja
    // inicializa o gerador de números aleatórios
    srand(time(NULL));
 8000aba:	2000      	movs	r0, #0
 8000abc:	f001 fe92 	bl	80027e4 <time>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f001 fe05 	bl	80026d4 <srand>

    // preenche a matriz com valores aleatórios
    for (int x = 0; x < 4; x++) {
 8000aca:	2300      	movs	r3, #0
 8000acc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000ad0:	e029      	b.n	8000b26 <Bomb+0x72>
        for (int y = 0; y < 6; y++) {
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000ad8:	e01c      	b.n	8000b14 <Bomb+0x60>
            tabu_bomb[x][y] = rand() % 2; // gera números aleatórios 0 ou 1
 8000ada:	f001 fe1f 	bl	800271c <rand>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	bfb8      	it	lt
 8000ae8:	425b      	neglt	r3, r3
 8000aea:	4619      	mov	r1, r3
 8000aec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000af0:	4613      	mov	r3, r2
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	4413      	add	r3, r2
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000afc:	4413      	add	r3, r2
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000b04:	4413      	add	r3, r2
 8000b06:	f843 1c98 	str.w	r1, [r3, #-152]
        for (int y = 0; y < 6; y++) {
 8000b0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000b0e:	3301      	adds	r3, #1
 8000b10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000b14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000b18:	2b05      	cmp	r3, #5
 8000b1a:	ddde      	ble.n	8000ada <Bomb+0x26>
    for (int x = 0; x < 4; x++) {
 8000b1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000b20:	3301      	adds	r3, #1
 8000b22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000b26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000b2a:	2b03      	cmp	r3, #3
 8000b2c:	ddd1      	ble.n	8000ad2 <Bomb+0x1e>
        }
    }

    // ajusta a quantidade de 1's para a quantidade desejada pelo usuário
    int cont_1 = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    for (int x = 0; x < 4; x++) {
 8000b34:	2300      	movs	r3, #0
 8000b36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000b3a:	e027      	b.n	8000b8c <Bomb+0xd8>
        for (int y = 0; y < 6; y++) {
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000b42:	e01a      	b.n	8000b7a <Bomb+0xc6>
            if (tabu_bomb[x][y] == 1) {
 8000b44:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000b48:	4613      	mov	r3, r2
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	4413      	add	r3, r2
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000b54:	4413      	add	r3, r2
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000b5c:	4413      	add	r3, r2
 8000b5e:	f853 3c98 	ldr.w	r3, [r3, #-152]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d104      	bne.n	8000b70 <Bomb+0xbc>
                cont_1++;
 8000b66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (int y = 0; y < 6; y++) {
 8000b70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b74:	3301      	adds	r3, #1
 8000b76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000b7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b7e:	2b05      	cmp	r3, #5
 8000b80:	dde0      	ble.n	8000b44 <Bomb+0x90>
    for (int x = 0; x < 4; x++) {
 8000b82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000b86:	3301      	adds	r3, #1
 8000b88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000b8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	ddd3      	ble.n	8000b3c <Bomb+0x88>
            }
        }
    }

    // se a quantidade de 1's for maior que a desejada, substitui alguns 1's por 0's
    if (cont_1 > bomba_bandeira) {
 8000b94:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000b98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	dd48      	ble.n	8000c30 <Bomb+0x17c>
        int dif = cont_1 - bomba_bandeira;
 8000b9e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000ba2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	677b      	str	r3, [r7, #116]	; 0x74
        for (int i = 0; i < dif; i++) {
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000bae:	e03a      	b.n	8000c26 <Bomb+0x172>
            int x = rand() % 4;
 8000bb0:	f001 fdb4 	bl	800271c <rand>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	425a      	negs	r2, r3
 8000bb8:	f003 0303 	and.w	r3, r3, #3
 8000bbc:	f002 0203 	and.w	r2, r2, #3
 8000bc0:	bf58      	it	pl
 8000bc2:	4253      	negpl	r3, r2
 8000bc4:	673b      	str	r3, [r7, #112]	; 0x70
            int y = rand() % 6;
 8000bc6:	f001 fda9 	bl	800271c <rand>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	4b3f      	ldr	r3, [pc, #252]	; (8000ccc <Bomb+0x218>)
 8000bce:	fb83 3102 	smull	r3, r1, r3, r2
 8000bd2:	17d3      	asrs	r3, r2, #31
 8000bd4:	1ac9      	subs	r1, r1, r3
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	440b      	add	r3, r1
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	66fb      	str	r3, [r7, #108]	; 0x6c
            if (tabu_bomb[x][y] == 1) {
 8000be2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000be4:	4613      	mov	r3, r2
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	4413      	add	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000bee:	4413      	add	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000bf6:	4413      	add	r3, r2
 8000bf8:	f853 3c98 	ldr.w	r3, [r3, #-152]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d10d      	bne.n	8000c1c <Bomb+0x168>
                tabu_bomb[x][y] = 0;
 8000c00:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000c02:	4613      	mov	r3, r2
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	4413      	add	r3, r2
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000c0c:	4413      	add	r3, r2
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000c14:	4413      	add	r3, r2
 8000c16:	2200      	movs	r2, #0
 8000c18:	f843 2c98 	str.w	r2, [r3, #-152]
        for (int i = 0; i < dif; i++) {
 8000c1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000c20:	3301      	adds	r3, #1
 8000c22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000c26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	dbbf      	blt.n	8000bb0 <Bomb+0xfc>
            }
        }
    }

    // se a quantidade de 1's for menor que a desejada, substitui alguns 0's por 1's
    if (cont_1 < bomba_bandeira) {
 8000c30:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000c34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c36:	429a      	cmp	r2, r3
 8000c38:	da44      	bge.n	8000cc4 <Bomb+0x210>
        int dif = bomba_bandeira - cont_1;
 8000c3a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000c3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	66bb      	str	r3, [r7, #104]	; 0x68
        for (int i = 0; i < dif; i++) {
 8000c44:	2300      	movs	r3, #0
 8000c46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000c48:	e038      	b.n	8000cbc <Bomb+0x208>
            int x = rand() % 4;
 8000c4a:	f001 fd67 	bl	800271c <rand>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	425a      	negs	r2, r3
 8000c52:	f003 0303 	and.w	r3, r3, #3
 8000c56:	f002 0203 	and.w	r2, r2, #3
 8000c5a:	bf58      	it	pl
 8000c5c:	4253      	negpl	r3, r2
 8000c5e:	667b      	str	r3, [r7, #100]	; 0x64
            int y = rand() % 6;
 8000c60:	f001 fd5c 	bl	800271c <rand>
 8000c64:	4602      	mov	r2, r0
 8000c66:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <Bomb+0x218>)
 8000c68:	fb83 3102 	smull	r3, r1, r3, r2
 8000c6c:	17d3      	asrs	r3, r2, #31
 8000c6e:	1ac9      	subs	r1, r1, r3
 8000c70:	460b      	mov	r3, r1
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	440b      	add	r3, r1
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	663b      	str	r3, [r7, #96]	; 0x60
            if (tabu_bomb[x][y] == 0) {
 8000c7c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000c7e:	4613      	mov	r3, r2
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	4413      	add	r3, r2
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c88:	4413      	add	r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000c90:	4413      	add	r3, r2
 8000c92:	f853 3c98 	ldr.w	r3, [r3, #-152]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d10d      	bne.n	8000cb6 <Bomb+0x202>
                tabu_bomb[x][y] = 1;
 8000c9a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	4413      	add	r3, r2
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ca6:	4413      	add	r3, r2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000cae:	4413      	add	r3, r2
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f843 2c98 	str.w	r2, [r3, #-152]
        for (int i = 0; i < dif; i++) {
 8000cb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000cb8:	3301      	adds	r3, #1
 8000cba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000cbc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000cbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	dbc2      	blt.n	8000c4a <Bomb+0x196>
            }
        }
    }

}
 8000cc4:	bf00      	nop
 8000cc6:	379c      	adds	r7, #156	; 0x9c
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd90      	pop	{r4, r7, pc}
 8000ccc:	2aaaaaab 	.word	0x2aaaaaab

08000cd0 <Error>:


void Error(void) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af04      	add	r7, sp, #16

	ST7735_WriteString(4, 45, "BOMBA DEVE SER < 0", Font_7x10, RED, BLACK);
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <Error+0x34>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	9202      	str	r2, [sp, #8]
 8000cdc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000ce0:	9201      	str	r2, [sp, #4]
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	9200      	str	r2, [sp, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a07      	ldr	r2, [pc, #28]	; (8000d08 <Error+0x38>)
 8000cea:	212d      	movs	r1, #45	; 0x2d
 8000cec:	2004      	movs	r0, #4
 8000cee:	f7ff fbd5 	bl	800049c <ST7735_WriteString>

	HAL_Delay(3000);
 8000cf2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000cf6:	f000 fb2d 	bl	8001354 <HAL_Delay>
	Start();
 8000cfa:	f7ff fe13 	bl	8000924 <Start>
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000000 	.word	0x20000000
 8000d08:	08002f38 	.word	0x08002f38

08000d0c <Perdeu>:
void Perdeu(void) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af04      	add	r7, sp, #16

	ST7735_FillScreen(BLACK);
 8000d12:	2000      	movs	r0, #0
 8000d14:	f7ff fc80 	bl	8000618 <ST7735_FillScreen>
	ST7735_WriteString(4, 45, "Perdeu", Font_7x10, RED, BLACK);
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <Perdeu+0x3c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	9202      	str	r2, [sp, #8]
 8000d1e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000d22:	9201      	str	r2, [sp, #4]
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	9200      	str	r2, [sp, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <Perdeu+0x40>)
 8000d2c:	212d      	movs	r1, #45	; 0x2d
 8000d2e:	2004      	movs	r0, #4
 8000d30:	f7ff fbb4 	bl	800049c <ST7735_WriteString>

	HAL_Delay(3000);
 8000d34:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d38:	f000 fb0c 	bl	8001354 <HAL_Delay>
	a1 =2;
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <Perdeu+0x44>)
 8000d3e:	2202      	movs	r2, #2
 8000d40:	601a      	str	r2, [r3, #0]

}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	08002f4c 	.word	0x08002f4c
 8000d50:	20000008 	.word	0x20000008

08000d54 <Ganhou>:
void Ganhou(void) {
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
	ST7735_WriteString(4, 45, "Ganhou", Font_7x10, RED, BLACK);

	HAL_Delay(3000);
	a1 =2;*/

}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <Square>:


void Square(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af02      	add	r7, sp, #8
	for (int i = 0; i < 4;i++)//LINHAS HORIZONTAIS
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	e016      	b.n	8000d9a <Square+0x3a>
		{
			ST7735_DrawLine(6, y, x, y, BLUE);
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <Square+0x8c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	b299      	uxth	r1, r3
 8000d72:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <Square+0x90>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <Square+0x8c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	b298      	uxth	r0, r3
 8000d7e:	231f      	movs	r3, #31
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	4603      	mov	r3, r0
 8000d84:	2006      	movs	r0, #6
 8000d86:	f7ff fc58 	bl	800063a <ST7735_DrawLine>
			y +=20;
 8000d8a:	4b18      	ldr	r3, [pc, #96]	; (8000dec <Square+0x8c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	3314      	adds	r3, #20
 8000d90:	4a16      	ldr	r2, [pc, #88]	; (8000dec <Square+0x8c>)
 8000d92:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 4;i++)//LINHAS HORIZONTAIS
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3301      	adds	r3, #1
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	dde5      	ble.n	8000d6c <Square+0xc>
		}
	for (int i = 0; i < 6;i++)// LINHAS VERTICAIS
 8000da0:	2300      	movs	r3, #0
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	e019      	b.n	8000dda <Square+0x7a>
	{
		ST7735_DrawLine(xa, 0, xa, ya+20, YELLOW);
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <Square+0x94>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	b298      	uxth	r0, r3
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <Square+0x94>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <Square+0x98>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	3314      	adds	r3, #20
 8000dba:	b299      	uxth	r1, r3
 8000dbc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	f7ff fc38 	bl	800063a <ST7735_DrawLine>
		xa +=20;
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <Square+0x94>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	3314      	adds	r3, #20
 8000dd0:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <Square+0x94>)
 8000dd2:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 6;i++)// LINHAS VERTICAIS
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	2b05      	cmp	r3, #5
 8000dde:	dde2      	ble.n	8000da6 <Square+0x46>
	}
	  Bomb();
 8000de0:	f7ff fe68 	bl	8000ab4 <Bomb>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000010 	.word	0x20000010
 8000df0:	2000000c 	.word	0x2000000c
 8000df4:	20000014 	.word	0x20000014
 8000df8:	20000018 	.word	0x20000018

08000dfc <Navegacao>:

void Navegacao(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af02      	add	r7, sp, #8
	  int x_pixel1 = x_pixel;
 8000e02:	4b7a      	ldr	r3, [pc, #488]	; (8000fec <Navegacao+0x1f0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	60fb      	str	r3, [r7, #12]
	  int y_pixel1 = y_pixel;
 8000e08:	4b79      	ldr	r3, [pc, #484]	; (8000ff0 <Navegacao+0x1f4>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	60bb      	str	r3, [r7, #8]

	  c = 0;
 8000e0e:	4b79      	ldr	r3, [pc, #484]	; (8000ff4 <Navegacao+0x1f8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
	  l = 0;
 8000e14:	4b78      	ldr	r3, [pc, #480]	; (8000ff8 <Navegacao+0x1fc>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]



	  while (confirmar == 0)
 8000e1a:	e0d9      	b.n	8000fd0 <Navegacao+0x1d4>
  {
		  if (LE_BOTAO_CIMA == 0)
 8000e1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e20:	4876      	ldr	r0, [pc, #472]	; (8000ffc <Navegacao+0x200>)
 8000e22:	f000 fcf7 	bl	8001814 <HAL_GPIO_ReadPin>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d13a      	bne.n	8000ea2 <Navegacao+0xa6>
		  {
		  	  	if (tabu_bomb[c][l] == 1)
 8000e2c:	4b71      	ldr	r3, [pc, #452]	; (8000ff4 <Navegacao+0x1f8>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b71      	ldr	r3, [pc, #452]	; (8000ff8 <Navegacao+0x1fc>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4972      	ldr	r1, [pc, #456]	; (8001000 <Navegacao+0x204>)
 8000e36:	0092      	lsls	r2, r2, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d116      	bne.n	8000e70 <Navegacao+0x74>
		  	  	{
		  	  		ST7735_FillRectangle(x_pixel1 -3, y_pixel1-5, 16, 15, RED);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	3b03      	subs	r3, #3
 8000e48:	b298      	uxth	r0, r3
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	3b05      	subs	r3, #5
 8000e50:	b299      	uxth	r1, r3
 8000e52:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	230f      	movs	r3, #15
 8000e5a:	2210      	movs	r2, #16
 8000e5c:	f7ff fb68 	bl	8000530 <ST7735_FillRectangle>
		  	  		HAL_Delay(700);
 8000e60:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000e64:	f000 fa76 	bl	8001354 <HAL_Delay>
		  	  		confirmar = 1;
 8000e68:	4b66      	ldr	r3, [pc, #408]	; (8001004 <Navegacao+0x208>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	e018      	b.n	8000ea2 <Navegacao+0xa6>
		  	  	}
		  	  	else
		  	  	{
		  	  		ST7735_FillRectangle(x_pixel1 -3, y_pixel1-5, 16, 15, YELLOW);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	3b03      	subs	r3, #3
 8000e76:	b298      	uxth	r0, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	3b05      	subs	r3, #5
 8000e7e:	b299      	uxth	r1, r3
 8000e80:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	230f      	movs	r3, #15
 8000e88:	2210      	movs	r2, #16
 8000e8a:	f7ff fb51 	bl	8000530 <ST7735_FillRectangle>
		  	  		casas_abertas +=1;
 8000e8e:	4b5e      	ldr	r3, [pc, #376]	; (8001008 <Navegacao+0x20c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	3301      	adds	r3, #1
 8000e94:	4a5c      	ldr	r2, [pc, #368]	; (8001008 <Navegacao+0x20c>)
 8000e96:	6013      	str	r3, [r2, #0]
		  	  		casas_abertas++;
 8000e98:	4b5b      	ldr	r3, [pc, #364]	; (8001008 <Navegacao+0x20c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	4a5a      	ldr	r2, [pc, #360]	; (8001008 <Navegacao+0x20c>)
 8000ea0:	6013      	str	r3, [r2, #0]
		  	  	}
		  }
		  ST7735_FillRectangle(x_pixel1 -3, y_pixel1-5, 7, 7, WHITE);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	3b03      	subs	r3, #3
 8000ea8:	b298      	uxth	r0, r3
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	3b05      	subs	r3, #5
 8000eb0:	b299      	uxth	r1, r3
 8000eb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	2307      	movs	r3, #7
 8000eba:	2207      	movs	r2, #7
 8000ebc:	f7ff fb38 	bl	8000530 <ST7735_FillRectangle>

	if (LE_BOTAO_DIREITO == 0)
 8000ec0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ec4:	484d      	ldr	r0, [pc, #308]	; (8000ffc <Navegacao+0x200>)
 8000ec6:	f000 fca5 	bl	8001814 <HAL_GPIO_ReadPin>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d165      	bne.n	8000f9c <Navegacao+0x1a0>
		{
			if (/*c < 4 && l < 5 && */x_pixel1 < 90 && y_pixel1 < 80)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2b59      	cmp	r3, #89	; 0x59
 8000ed4:	dc1d      	bgt.n	8000f12 <Navegacao+0x116>
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	2b4f      	cmp	r3, #79	; 0x4f
 8000eda:	dc1a      	bgt.n	8000f12 <Navegacao+0x116>
			{
				  ST7735_FillRectangle(x_pixel1 -3, y_pixel1-5, 7, 7, BLACK);//ANDAR PRA FRENTE
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	3b03      	subs	r3, #3
 8000ee2:	b298      	uxth	r0, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	3b05      	subs	r3, #5
 8000eea:	b299      	uxth	r1, r3
 8000eec:	2300      	movs	r3, #0
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	2307      	movs	r3, #7
 8000ef2:	2207      	movs	r2, #7
 8000ef4:	f7ff fb1c 	bl	8000530 <ST7735_FillRectangle>

				x_pixel1 +=20;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	3314      	adds	r3, #20
 8000efc:	60fb      	str	r3, [r7, #12]
				c +=1;
 8000efe:	4b3d      	ldr	r3, [pc, #244]	; (8000ff4 <Navegacao+0x1f8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	3301      	adds	r3, #1
 8000f04:	4a3b      	ldr	r2, [pc, #236]	; (8000ff4 <Navegacao+0x1f8>)
 8000f06:	6013      	str	r3, [r2, #0]
				HAL_Delay(500);//SEM O DELAY O PIXEL PERCORRE POR TODA AS CASAS FRENETICO
 8000f08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f0c:	f000 fa22 	bl	8001354 <HAL_Delay>
 8000f10:	e044      	b.n	8000f9c <Navegacao+0x1a0>

			}
			else if (y_pixel1 >= 70 )//VOLTAR PRO INICIO TOTAL
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	2b45      	cmp	r3, #69	; 0x45
 8000f16:	dd1e      	ble.n	8000f56 <Navegacao+0x15a>
			{
				  ST7735_FillRectangle(x_pixel1 -3, y_pixel1-5, 7, 7, BLACK);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	b298      	uxth	r0, r3
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	3b05      	subs	r3, #5
 8000f26:	b299      	uxth	r1, r3
 8000f28:	2300      	movs	r3, #0
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2307      	movs	r3, #7
 8000f2e:	2207      	movs	r2, #7
 8000f30:	f7ff fafe 	bl	8000530 <ST7735_FillRectangle>
				c = 0;
 8000f34:	4b2f      	ldr	r3, [pc, #188]	; (8000ff4 <Navegacao+0x1f8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
				l = 0;
 8000f3a:	4b2f      	ldr	r3, [pc, #188]	; (8000ff8 <Navegacao+0x1fc>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
				x_pixel1 = x_pixel;
 8000f40:	4b2a      	ldr	r3, [pc, #168]	; (8000fec <Navegacao+0x1f0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	60fb      	str	r3, [r7, #12]
				y_pixel1 = y_pixel;
 8000f46:	4b2a      	ldr	r3, [pc, #168]	; (8000ff0 <Navegacao+0x1f4>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	60bb      	str	r3, [r7, #8]
				HAL_Delay(500);
 8000f4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f50:	f000 fa00 	bl	8001354 <HAL_Delay>
 8000f54:	e022      	b.n	8000f9c <Navegacao+0x1a0>
			}

			else if (x_pixel1 >= 81)// IR PRO INICIO DA PROXIMA LINHA
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2b50      	cmp	r3, #80	; 0x50
 8000f5a:	dd1f      	ble.n	8000f9c <Navegacao+0x1a0>
			{
				  ST7735_FillRectangle(x_pixel1 -3, y_pixel1-5, 7, 7, BLACK);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	3b03      	subs	r3, #3
 8000f62:	b298      	uxth	r0, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	3b05      	subs	r3, #5
 8000f6a:	b299      	uxth	r1, r3
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2307      	movs	r3, #7
 8000f72:	2207      	movs	r2, #7
 8000f74:	f7ff fadc 	bl	8000530 <ST7735_FillRectangle>
				x_pixel1 = x_pixel;
 8000f78:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <Navegacao+0x1f0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	60fb      	str	r3, [r7, #12]
				y_pixel1 += 20;
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	3314      	adds	r3, #20
 8000f82:	60bb      	str	r3, [r7, #8]
				l += 1;
 8000f84:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <Navegacao+0x1fc>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	4a1b      	ldr	r2, [pc, #108]	; (8000ff8 <Navegacao+0x1fc>)
 8000f8c:	6013      	str	r3, [r2, #0]
				c = 0;
 8000f8e:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <Navegacao+0x1f8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
				HAL_Delay(500);
 8000f94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f98:	f000 f9dc 	bl	8001354 <HAL_Delay>
			}
		}

		if(LE_BOTAO_BAIXO == 0){
 8000f9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa0:	4816      	ldr	r0, [pc, #88]	; (8000ffc <Navegacao+0x200>)
 8000fa2:	f000 fc37 	bl	8001814 <HAL_GPIO_ReadPin>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d103      	bne.n	8000fb4 <Navegacao+0x1b8>
			Bandeira(x_pixel1, y_pixel1);
 8000fac:	68b9      	ldr	r1, [r7, #8]
 8000fae:	68f8      	ldr	r0, [r7, #12]
 8000fb0:	f000 f82e 	bl	8001010 <Bandeira>
		}
		int max_casas = 20;
 8000fb4:	2314      	movs	r3, #20
 8000fb6:	607b      	str	r3, [r7, #4]
		int ganhar = max_casas - bomba_bandeira;
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <Navegacao+0x210>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	603b      	str	r3, [r7, #0]
		if (casas_abertas == ganhar)
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <Navegacao+0x20c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d101      	bne.n	8000fd0 <Navegacao+0x1d4>
		{
			Ganhou();
 8000fcc:	f7ff fec2 	bl	8000d54 <Ganhou>
	  while (confirmar == 0)
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <Navegacao+0x208>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f43f af21 	beq.w	8000e1c <Navegacao+0x20>
		}
	}
	  confirmar = 0;
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <Navegacao+0x208>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
	  Perdeu();
 8000fe0:	f7ff fe94 	bl	8000d0c <Perdeu>


}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	2000001c 	.word	0x2000001c
 8000ff0:	20000020 	.word	0x20000020
 8000ff4:	200000b8 	.word	0x200000b8
 8000ff8:	200000bc 	.word	0x200000bc
 8000ffc:	40010800 	.word	0x40010800
 8001000:	2000015c 	.word	0x2000015c
 8001004:	200000c0 	.word	0x200000c0
 8001008:	200000c4 	.word	0x200000c4
 800100c:	200000b0 	.word	0x200000b0

08001010 <Bandeira>:

void Bandeira(int x_pixel1, int y_pixel1){
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af04      	add	r7, sp, #16
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
	de bombas na tela diminui.        */

		/* no p10 caso o jogador aperte será colorido de amarelo a casa que ele confirmou
		 * sendo assim, diminuira a quantidade de bombas*/
			//if()//se bandeira for menor que 1 nn funciona mais
			if(bomba_bandeira >= 1){
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <Bandeira+0x74>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	dd2b      	ble.n	800107a <Bandeira+0x6a>

				/*para que as variaveis de x e y acompanhem o cursor p/ serem impressas será necessario colocar
				 * um ponteiro em cada para apontarem para o endereço xpixel e ypixel?*/
				ST7735_FillRectangle(x_pixel1 -5, y_pixel1-5, 16, 15, BLUE);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	b29b      	uxth	r3, r3
 8001026:	3b05      	subs	r3, #5
 8001028:	b298      	uxth	r0, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b29b      	uxth	r3, r3
 800102e:	3b05      	subs	r3, #5
 8001030:	b299      	uxth	r1, r3
 8001032:	231f      	movs	r3, #31
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	230f      	movs	r3, #15
 8001038:	2210      	movs	r2, #16
 800103a:	f7ff fa79 	bl	8000530 <ST7735_FillRectangle>
				bomba_bandeira = bomba_bandeira - 1;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <Bandeira+0x74>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3b01      	subs	r3, #1
 8001044:	4a0f      	ldr	r2, [pc, #60]	; (8001084 <Bandeira+0x74>)
 8001046:	6013      	str	r3, [r2, #0]
				HAL_Delay(500);
 8001048:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800104c:	f000 f982 	bl	8001354 <HAL_Delay>
				sprintf(strA, "%d", bomba_bandeira);
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <Bandeira+0x74>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	490c      	ldr	r1, [pc, #48]	; (8001088 <Bandeira+0x78>)
 8001058:	480c      	ldr	r0, [pc, #48]	; (800108c <Bandeira+0x7c>)
 800105a:	f001 fba3 	bl	80027a4 <siprintf>
				ST7735_WriteString(130, 60, strA, Font_7x10, WHITE, BLACK);
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <Bandeira+0x80>)
 8001060:	2200      	movs	r2, #0
 8001062:	9202      	str	r2, [sp, #8]
 8001064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001068:	9201      	str	r2, [sp, #4]
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	9200      	str	r2, [sp, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a06      	ldr	r2, [pc, #24]	; (800108c <Bandeira+0x7c>)
 8001072:	213c      	movs	r1, #60	; 0x3c
 8001074:	2082      	movs	r0, #130	; 0x82
 8001076:	f7ff fa11 	bl	800049c <ST7735_WriteString>

			}

}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200000b0 	.word	0x200000b0
 8001088:	08002f24 	.word	0x08002f24
 800108c:	200000ec 	.word	0x200000ec
 8001090:	20000000 	.word	0x20000000

08001094 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 800109a:	e7fe      	b.n	800109a <Error_Handler+0x6>

0800109c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_MspInit+0x5c>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <HAL_MspInit+0x5c>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6193      	str	r3, [r2, #24]
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_MspInit+0x5c>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <HAL_MspInit+0x5c>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	4a0e      	ldr	r2, [pc, #56]	; (80010f8 <HAL_MspInit+0x5c>)
 80010c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c4:	61d3      	str	r3, [r2, #28]
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <HAL_MspInit+0x5c>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_MspInit+0x60>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <HAL_MspInit+0x60>)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ee:	bf00      	nop
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40010000 	.word	0x40010000

08001100 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a15      	ldr	r2, [pc, #84]	; (8001170 <HAL_SPI_MspInit+0x70>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d123      	bne.n	8001168 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_SPI_MspInit+0x74>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a13      	ldr	r2, [pc, #76]	; (8001174 <HAL_SPI_MspInit+0x74>)
 8001126:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_SPI_MspInit+0x74>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_SPI_MspInit+0x74>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <HAL_SPI_MspInit+0x74>)
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <HAL_SPI_MspInit+0x74>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001150:	23a0      	movs	r3, #160	; 0xa0
 8001152:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	4619      	mov	r1, r3
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <HAL_SPI_MspInit+0x78>)
 8001164:	f000 f9fc 	bl	8001560 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001168:	bf00      	nop
 800116a:	3720      	adds	r7, #32
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40013000 	.word	0x40013000
 8001174:	40021000 	.word	0x40021000
 8001178:	40010800 	.word	0x40010800

0800117c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <NMI_Handler+0x4>

08001182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <HardFault_Handler+0x4>

08001188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <MemManage_Handler+0x4>

0800118e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <BusFault_Handler+0x4>

08001194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <UsageFault_Handler+0x4>

0800119a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr

080011a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr

080011b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr

080011be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c2:	f000 f8ab 	bl	800131c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d4:	4a14      	ldr	r2, [pc, #80]	; (8001228 <_sbrk+0x5c>)
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <_sbrk+0x60>)
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <_sbrk+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d102      	bne.n	80011ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <_sbrk+0x64>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	; (8001234 <_sbrk+0x68>)
 80011ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d207      	bcs.n	800120c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011fc:	f001 f98a 	bl	8002514 <__errno>
 8001200:	4602      	mov	r2, r0
 8001202:	230c      	movs	r3, #12
 8001204:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	e009      	b.n	8001220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <_sbrk+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <_sbrk+0x64>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <_sbrk+0x64>)
 800121c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800121e:	68fb      	ldr	r3, [r7, #12]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20005000 	.word	0x20005000
 800122c:	00000400 	.word	0x00000400
 8001230:	200000c8 	.word	0x200000c8
 8001234:	200001c8 	.word	0x200001c8

08001238 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr

08001244 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001244:	480c      	ldr	r0, [pc, #48]	; (8001278 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001246:	490d      	ldr	r1, [pc, #52]	; (800127c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001248:	4a0d      	ldr	r2, [pc, #52]	; (8001280 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800124c:	e002      	b.n	8001254 <LoopCopyDataInit>

0800124e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001252:	3304      	adds	r3, #4

08001254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001258:	d3f9      	bcc.n	800124e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800125c:	4c0a      	ldr	r4, [pc, #40]	; (8001288 <LoopFillZerobss+0x22>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001260:	e001      	b.n	8001266 <LoopFillZerobss>

08001262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001264:	3204      	adds	r2, #4

08001266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001268:	d3fb      	bcc.n	8001262 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800126a:	f7ff ffe5 	bl	8001238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800126e:	f001 f957 	bl	8002520 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001272:	f7ff fa6d 	bl	8000750 <main>
  bx lr
 8001276:	4770      	bx	lr
  ldr r0, =_sdata
 8001278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800127c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001280:	080037f8 	.word	0x080037f8
  ldr r2, =_sbss
 8001284:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001288:	200001c4 	.word	0x200001c4

0800128c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800128c:	e7fe      	b.n	800128c <ADC1_2_IRQHandler>
	...

08001290 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <HAL_Init+0x28>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <HAL_Init+0x28>)
 800129a:	f043 0310 	orr.w	r3, r3, #16
 800129e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a0:	2003      	movs	r0, #3
 80012a2:	f000 f929 	bl	80014f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012a6:	2000      	movs	r0, #0
 80012a8:	f000 f808 	bl	80012bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ac:	f7ff fef6 	bl	800109c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40022000 	.word	0x40022000

080012bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_InitTick+0x54>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_InitTick+0x58>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 f933 	bl	8001546 <HAL_SYSTICK_Config>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00e      	b.n	8001308 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b0f      	cmp	r3, #15
 80012ee:	d80a      	bhi.n	8001306 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f0:	2200      	movs	r2, #0
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295
 80012f8:	f000 f909 	bl	800150e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012fc:	4a06      	ldr	r2, [pc, #24]	; (8001318 <HAL_InitTick+0x5c>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	e000      	b.n	8001308 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000024 	.word	0x20000024
 8001314:	2000002c 	.word	0x2000002c
 8001318:	20000028 	.word	0x20000028

0800131c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <HAL_IncTick+0x1c>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_IncTick+0x20>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4413      	add	r3, r2
 800132c:	4a03      	ldr	r2, [pc, #12]	; (800133c <HAL_IncTick+0x20>)
 800132e:	6013      	str	r3, [r2, #0]
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	2000002c 	.word	0x2000002c
 800133c:	200001bc 	.word	0x200001bc

08001340 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return uwTick;
 8001344:	4b02      	ldr	r3, [pc, #8]	; (8001350 <HAL_GetTick+0x10>)
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	200001bc 	.word	0x200001bc

08001354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800135c:	f7ff fff0 	bl	8001340 <HAL_GetTick>
 8001360:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800136c:	d005      	beq.n	800137a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_Delay+0x40>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4413      	add	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800137a:	bf00      	nop
 800137c:	f7ff ffe0 	bl	8001340 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	429a      	cmp	r2, r3
 800138a:	d8f7      	bhi.n	800137c <HAL_Delay+0x28>
  {
  }
}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	2000002c 	.word	0x2000002c

08001398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <__NVIC_SetPriorityGrouping+0x44>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b4:	4013      	ands	r3, r2
 80013b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ca:	4a04      	ldr	r2, [pc, #16]	; (80013dc <__NVIC_SetPriorityGrouping+0x44>)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	60d3      	str	r3, [r2, #12]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <__NVIC_GetPriorityGrouping+0x18>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	0a1b      	lsrs	r3, r3, #8
 80013ea:	f003 0307 	and.w	r3, r3, #7
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	6039      	str	r1, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	2b00      	cmp	r3, #0
 800140e:	db0a      	blt.n	8001426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	b2da      	uxtb	r2, r3
 8001414:	490c      	ldr	r1, [pc, #48]	; (8001448 <__NVIC_SetPriority+0x4c>)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	0112      	lsls	r2, r2, #4
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	440b      	add	r3, r1
 8001420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001424:	e00a      	b.n	800143c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4908      	ldr	r1, [pc, #32]	; (800144c <__NVIC_SetPriority+0x50>)
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	3b04      	subs	r3, #4
 8001434:	0112      	lsls	r2, r2, #4
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	440b      	add	r3, r1
 800143a:	761a      	strb	r2, [r3, #24]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000e100 	.word	0xe000e100
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001450:	b480      	push	{r7}
 8001452:	b089      	sub	sp, #36	; 0x24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f1c3 0307 	rsb	r3, r3, #7
 800146a:	2b04      	cmp	r3, #4
 800146c:	bf28      	it	cs
 800146e:	2304      	movcs	r3, #4
 8001470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3304      	adds	r3, #4
 8001476:	2b06      	cmp	r3, #6
 8001478:	d902      	bls.n	8001480 <NVIC_EncodePriority+0x30>
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3b03      	subs	r3, #3
 800147e:	e000      	b.n	8001482 <NVIC_EncodePriority+0x32>
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	f04f 32ff 	mov.w	r2, #4294967295
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43da      	mvns	r2, r3
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	401a      	ands	r2, r3
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001498:	f04f 31ff 	mov.w	r1, #4294967295
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	fa01 f303 	lsl.w	r3, r1, r3
 80014a2:	43d9      	mvns	r1, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a8:	4313      	orrs	r3, r2
         );
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3724      	adds	r7, #36	; 0x24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c4:	d301      	bcc.n	80014ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00f      	b.n	80014ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ca:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <SysTick_Config+0x40>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d2:	210f      	movs	r1, #15
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	f7ff ff90 	bl	80013fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <SysTick_Config+0x40>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e2:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <SysTick_Config+0x40>)
 80014e4:	2207      	movs	r2, #7
 80014e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	e000e010 	.word	0xe000e010

080014f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff49 	bl	8001398 <__NVIC_SetPriorityGrouping>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800150e:	b580      	push	{r7, lr}
 8001510:	b086      	sub	sp, #24
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
 800151a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001520:	f7ff ff5e 	bl	80013e0 <__NVIC_GetPriorityGrouping>
 8001524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	68b9      	ldr	r1, [r7, #8]
 800152a:	6978      	ldr	r0, [r7, #20]
 800152c:	f7ff ff90 	bl	8001450 <NVIC_EncodePriority>
 8001530:	4602      	mov	r2, r0
 8001532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001536:	4611      	mov	r1, r2
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff5f 	bl	80013fc <__NVIC_SetPriority>
}
 800153e:	bf00      	nop
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffb0 	bl	80014b4 <SysTick_Config>
 8001554:	4603      	mov	r3, r0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001560:	b480      	push	{r7}
 8001562:	b08b      	sub	sp, #44	; 0x2c
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001572:	e127      	b.n	80017c4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001574:	2201      	movs	r2, #1
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	69fa      	ldr	r2, [r7, #28]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	429a      	cmp	r2, r3
 800158e:	f040 8116 	bne.w	80017be <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b12      	cmp	r3, #18
 8001598:	d034      	beq.n	8001604 <HAL_GPIO_Init+0xa4>
 800159a:	2b12      	cmp	r3, #18
 800159c:	d80d      	bhi.n	80015ba <HAL_GPIO_Init+0x5a>
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d02b      	beq.n	80015fa <HAL_GPIO_Init+0x9a>
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d804      	bhi.n	80015b0 <HAL_GPIO_Init+0x50>
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d031      	beq.n	800160e <HAL_GPIO_Init+0xae>
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d01c      	beq.n	80015e8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015ae:	e048      	b.n	8001642 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d043      	beq.n	800163c <HAL_GPIO_Init+0xdc>
 80015b4:	2b11      	cmp	r3, #17
 80015b6:	d01b      	beq.n	80015f0 <HAL_GPIO_Init+0x90>
          break;
 80015b8:	e043      	b.n	8001642 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015ba:	4a89      	ldr	r2, [pc, #548]	; (80017e0 <HAL_GPIO_Init+0x280>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d026      	beq.n	800160e <HAL_GPIO_Init+0xae>
 80015c0:	4a87      	ldr	r2, [pc, #540]	; (80017e0 <HAL_GPIO_Init+0x280>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d806      	bhi.n	80015d4 <HAL_GPIO_Init+0x74>
 80015c6:	4a87      	ldr	r2, [pc, #540]	; (80017e4 <HAL_GPIO_Init+0x284>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d020      	beq.n	800160e <HAL_GPIO_Init+0xae>
 80015cc:	4a86      	ldr	r2, [pc, #536]	; (80017e8 <HAL_GPIO_Init+0x288>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d01d      	beq.n	800160e <HAL_GPIO_Init+0xae>
          break;
 80015d2:	e036      	b.n	8001642 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015d4:	4a85      	ldr	r2, [pc, #532]	; (80017ec <HAL_GPIO_Init+0x28c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d019      	beq.n	800160e <HAL_GPIO_Init+0xae>
 80015da:	4a85      	ldr	r2, [pc, #532]	; (80017f0 <HAL_GPIO_Init+0x290>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d016      	beq.n	800160e <HAL_GPIO_Init+0xae>
 80015e0:	4a84      	ldr	r2, [pc, #528]	; (80017f4 <HAL_GPIO_Init+0x294>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d013      	beq.n	800160e <HAL_GPIO_Init+0xae>
          break;
 80015e6:	e02c      	b.n	8001642 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	623b      	str	r3, [r7, #32]
          break;
 80015ee:	e028      	b.n	8001642 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	3304      	adds	r3, #4
 80015f6:	623b      	str	r3, [r7, #32]
          break;
 80015f8:	e023      	b.n	8001642 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	3308      	adds	r3, #8
 8001600:	623b      	str	r3, [r7, #32]
          break;
 8001602:	e01e      	b.n	8001642 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	330c      	adds	r3, #12
 800160a:	623b      	str	r3, [r7, #32]
          break;
 800160c:	e019      	b.n	8001642 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001616:	2304      	movs	r3, #4
 8001618:	623b      	str	r3, [r7, #32]
          break;
 800161a:	e012      	b.n	8001642 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d105      	bne.n	8001630 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001624:	2308      	movs	r3, #8
 8001626:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	611a      	str	r2, [r3, #16]
          break;
 800162e:	e008      	b.n	8001642 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001630:	2308      	movs	r3, #8
 8001632:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	615a      	str	r2, [r3, #20]
          break;
 800163a:	e002      	b.n	8001642 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800163c:	2300      	movs	r3, #0
 800163e:	623b      	str	r3, [r7, #32]
          break;
 8001640:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	2bff      	cmp	r3, #255	; 0xff
 8001646:	d801      	bhi.n	800164c <HAL_GPIO_Init+0xec>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	e001      	b.n	8001650 <HAL_GPIO_Init+0xf0>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3304      	adds	r3, #4
 8001650:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	2bff      	cmp	r3, #255	; 0xff
 8001656:	d802      	bhi.n	800165e <HAL_GPIO_Init+0xfe>
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	e002      	b.n	8001664 <HAL_GPIO_Init+0x104>
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	3b08      	subs	r3, #8
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	210f      	movs	r1, #15
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	401a      	ands	r2, r3
 8001676:	6a39      	ldr	r1, [r7, #32]
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	431a      	orrs	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 8096 	beq.w	80017be <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001692:	4b59      	ldr	r3, [pc, #356]	; (80017f8 <HAL_GPIO_Init+0x298>)
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	4a58      	ldr	r2, [pc, #352]	; (80017f8 <HAL_GPIO_Init+0x298>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6193      	str	r3, [r2, #24]
 800169e:	4b56      	ldr	r3, [pc, #344]	; (80017f8 <HAL_GPIO_Init+0x298>)
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016aa:	4a54      	ldr	r2, [pc, #336]	; (80017fc <HAL_GPIO_Init+0x29c>)
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	3302      	adds	r3, #2
 80016b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	220f      	movs	r2, #15
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	4013      	ands	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4b      	ldr	r2, [pc, #300]	; (8001800 <HAL_GPIO_Init+0x2a0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d013      	beq.n	80016fe <HAL_GPIO_Init+0x19e>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4a      	ldr	r2, [pc, #296]	; (8001804 <HAL_GPIO_Init+0x2a4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d00d      	beq.n	80016fa <HAL_GPIO_Init+0x19a>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a49      	ldr	r2, [pc, #292]	; (8001808 <HAL_GPIO_Init+0x2a8>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d007      	beq.n	80016f6 <HAL_GPIO_Init+0x196>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a48      	ldr	r2, [pc, #288]	; (800180c <HAL_GPIO_Init+0x2ac>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d101      	bne.n	80016f2 <HAL_GPIO_Init+0x192>
 80016ee:	2303      	movs	r3, #3
 80016f0:	e006      	b.n	8001700 <HAL_GPIO_Init+0x1a0>
 80016f2:	2304      	movs	r3, #4
 80016f4:	e004      	b.n	8001700 <HAL_GPIO_Init+0x1a0>
 80016f6:	2302      	movs	r3, #2
 80016f8:	e002      	b.n	8001700 <HAL_GPIO_Init+0x1a0>
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <HAL_GPIO_Init+0x1a0>
 80016fe:	2300      	movs	r3, #0
 8001700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001702:	f002 0203 	and.w	r2, r2, #3
 8001706:	0092      	lsls	r2, r2, #2
 8001708:	4093      	lsls	r3, r2
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	4313      	orrs	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001710:	493a      	ldr	r1, [pc, #232]	; (80017fc <HAL_GPIO_Init+0x29c>)
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	089b      	lsrs	r3, r3, #2
 8001716:	3302      	adds	r3, #2
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d006      	beq.n	8001738 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800172a:	4b39      	ldr	r3, [pc, #228]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4938      	ldr	r1, [pc, #224]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	600b      	str	r3, [r1, #0]
 8001736:	e006      	b.n	8001746 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001738:	4b35      	ldr	r3, [pc, #212]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	43db      	mvns	r3, r3
 8001740:	4933      	ldr	r1, [pc, #204]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 8001742:	4013      	ands	r3, r2
 8001744:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d006      	beq.n	8001760 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001752:	4b2f      	ldr	r3, [pc, #188]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	492e      	ldr	r1, [pc, #184]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	604b      	str	r3, [r1, #4]
 800175e:	e006      	b.n	800176e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001760:	4b2b      	ldr	r3, [pc, #172]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	43db      	mvns	r3, r3
 8001768:	4929      	ldr	r1, [pc, #164]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 800176a:	4013      	ands	r3, r2
 800176c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d006      	beq.n	8001788 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800177a:	4b25      	ldr	r3, [pc, #148]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	4924      	ldr	r1, [pc, #144]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	4313      	orrs	r3, r2
 8001784:	608b      	str	r3, [r1, #8]
 8001786:	e006      	b.n	8001796 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001788:	4b21      	ldr	r3, [pc, #132]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	43db      	mvns	r3, r3
 8001790:	491f      	ldr	r1, [pc, #124]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 8001792:	4013      	ands	r3, r2
 8001794:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d006      	beq.n	80017b0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017a2:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 80017a4:	68da      	ldr	r2, [r3, #12]
 80017a6:	491a      	ldr	r1, [pc, #104]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	60cb      	str	r3, [r1, #12]
 80017ae:	e006      	b.n	80017be <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017b0:	4b17      	ldr	r3, [pc, #92]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	4915      	ldr	r1, [pc, #84]	; (8001810 <HAL_GPIO_Init+0x2b0>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	3301      	adds	r3, #1
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	fa22 f303 	lsr.w	r3, r2, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f47f aed0 	bne.w	8001574 <HAL_GPIO_Init+0x14>
  }
}
 80017d4:	bf00      	nop
 80017d6:	372c      	adds	r7, #44	; 0x2c
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	10210000 	.word	0x10210000
 80017e4:	10110000 	.word	0x10110000
 80017e8:	10120000 	.word	0x10120000
 80017ec:	10310000 	.word	0x10310000
 80017f0:	10320000 	.word	0x10320000
 80017f4:	10220000 	.word	0x10220000
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010000 	.word	0x40010000
 8001800:	40010800 	.word	0x40010800
 8001804:	40010c00 	.word	0x40010c00
 8001808:	40011000 	.word	0x40011000
 800180c:	40011400 	.word	0x40011400
 8001810:	40010400 	.word	0x40010400

08001814 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	887b      	ldrh	r3, [r7, #2]
 8001826:	4013      	ands	r3, r2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d002      	beq.n	8001832 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800182c:	2301      	movs	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]
 8001830:	e001      	b.n	8001836 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001836:	7bfb      	ldrb	r3, [r7, #15]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr

08001842 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	460b      	mov	r3, r1
 800184c:	807b      	strh	r3, [r7, #2]
 800184e:	4613      	mov	r3, r2
 8001850:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001852:	787b      	ldrb	r3, [r7, #1]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001858:	887a      	ldrh	r2, [r7, #2]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800185e:	e003      	b.n	8001868 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001860:	887b      	ldrh	r3, [r7, #2]
 8001862:	041a      	lsls	r2, r3, #16
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	611a      	str	r2, [r3, #16]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
	...

08001874 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e26c      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 8087 	beq.w	80019a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001894:	4b92      	ldr	r3, [pc, #584]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 030c 	and.w	r3, r3, #12
 800189c:	2b04      	cmp	r3, #4
 800189e:	d00c      	beq.n	80018ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018a0:	4b8f      	ldr	r3, [pc, #572]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 030c 	and.w	r3, r3, #12
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	d112      	bne.n	80018d2 <HAL_RCC_OscConfig+0x5e>
 80018ac:	4b8c      	ldr	r3, [pc, #560]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b8:	d10b      	bne.n	80018d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ba:	4b89      	ldr	r3, [pc, #548]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d06c      	beq.n	80019a0 <HAL_RCC_OscConfig+0x12c>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d168      	bne.n	80019a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e246      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018da:	d106      	bne.n	80018ea <HAL_RCC_OscConfig+0x76>
 80018dc:	4b80      	ldr	r3, [pc, #512]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a7f      	ldr	r2, [pc, #508]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	e02e      	b.n	8001948 <HAL_RCC_OscConfig+0xd4>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10c      	bne.n	800190c <HAL_RCC_OscConfig+0x98>
 80018f2:	4b7b      	ldr	r3, [pc, #492]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a7a      	ldr	r2, [pc, #488]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	4b78      	ldr	r3, [pc, #480]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a77      	ldr	r2, [pc, #476]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001904:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	e01d      	b.n	8001948 <HAL_RCC_OscConfig+0xd4>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001914:	d10c      	bne.n	8001930 <HAL_RCC_OscConfig+0xbc>
 8001916:	4b72      	ldr	r3, [pc, #456]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a71      	ldr	r2, [pc, #452]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 800191c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	4b6f      	ldr	r3, [pc, #444]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a6e      	ldr	r2, [pc, #440]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	e00b      	b.n	8001948 <HAL_RCC_OscConfig+0xd4>
 8001930:	4b6b      	ldr	r3, [pc, #428]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a6a      	ldr	r2, [pc, #424]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	4b68      	ldr	r3, [pc, #416]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a67      	ldr	r2, [pc, #412]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001946:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d013      	beq.n	8001978 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7ff fcf6 	bl	8001340 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001958:	f7ff fcf2 	bl	8001340 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b64      	cmp	r3, #100	; 0x64
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e1fa      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	4b5d      	ldr	r3, [pc, #372]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0xe4>
 8001976:	e014      	b.n	80019a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff fce2 	bl	8001340 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001980:	f7ff fcde 	bl	8001340 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b64      	cmp	r3, #100	; 0x64
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e1e6      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001992:	4b53      	ldr	r3, [pc, #332]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x10c>
 800199e:	e000      	b.n	80019a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d063      	beq.n	8001a76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ae:	4b4c      	ldr	r3, [pc, #304]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00b      	beq.n	80019d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019ba:	4b49      	ldr	r3, [pc, #292]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b08      	cmp	r3, #8
 80019c4:	d11c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x18c>
 80019c6:	4b46      	ldr	r3, [pc, #280]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d116      	bne.n	8001a00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d2:	4b43      	ldr	r3, [pc, #268]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d005      	beq.n	80019ea <HAL_RCC_OscConfig+0x176>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d001      	beq.n	80019ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e1ba      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ea:	4b3d      	ldr	r3, [pc, #244]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4939      	ldr	r1, [pc, #228]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fe:	e03a      	b.n	8001a76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d020      	beq.n	8001a4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a08:	4b36      	ldr	r3, [pc, #216]	; (8001ae4 <HAL_RCC_OscConfig+0x270>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0e:	f7ff fc97 	bl	8001340 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a16:	f7ff fc93 	bl	8001340 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e19b      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a28:	4b2d      	ldr	r3, [pc, #180]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f0      	beq.n	8001a16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a34:	4b2a      	ldr	r3, [pc, #168]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	4927      	ldr	r1, [pc, #156]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]
 8001a48:	e015      	b.n	8001a76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4a:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <HAL_RCC_OscConfig+0x270>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a50:	f7ff fc76 	bl	8001340 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a58:	f7ff fc72 	bl	8001340 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e17a      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d03a      	beq.n	8001af8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d019      	beq.n	8001abe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8a:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a90:	f7ff fc56 	bl	8001340 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a98:	f7ff fc52 	bl	8001340 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e15a      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ab6:	2001      	movs	r0, #1
 8001ab8:	f000 faa8 	bl	800200c <RCC_Delay>
 8001abc:	e01c      	b.n	8001af8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_RCC_OscConfig+0x274>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac4:	f7ff fc3c 	bl	8001340 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aca:	e00f      	b.n	8001aec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001acc:	f7ff fc38 	bl	8001340 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d908      	bls.n	8001aec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e140      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
 8001ade:	bf00      	nop
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	42420000 	.word	0x42420000
 8001ae8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aec:	4b9e      	ldr	r3, [pc, #632]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1e9      	bne.n	8001acc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80a6 	beq.w	8001c52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b0a:	4b97      	ldr	r3, [pc, #604]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10d      	bne.n	8001b32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	4b94      	ldr	r3, [pc, #592]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	4a93      	ldr	r2, [pc, #588]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b20:	61d3      	str	r3, [r2, #28]
 8001b22:	4b91      	ldr	r3, [pc, #580]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b32:	4b8e      	ldr	r3, [pc, #568]	; (8001d6c <HAL_RCC_OscConfig+0x4f8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d118      	bne.n	8001b70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b3e:	4b8b      	ldr	r3, [pc, #556]	; (8001d6c <HAL_RCC_OscConfig+0x4f8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a8a      	ldr	r2, [pc, #552]	; (8001d6c <HAL_RCC_OscConfig+0x4f8>)
 8001b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4a:	f7ff fbf9 	bl	8001340 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b52:	f7ff fbf5 	bl	8001340 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b64      	cmp	r3, #100	; 0x64
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e0fd      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b64:	4b81      	ldr	r3, [pc, #516]	; (8001d6c <HAL_RCC_OscConfig+0x4f8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0f0      	beq.n	8001b52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d106      	bne.n	8001b86 <HAL_RCC_OscConfig+0x312>
 8001b78:	4b7b      	ldr	r3, [pc, #492]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	4a7a      	ldr	r2, [pc, #488]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6213      	str	r3, [r2, #32]
 8001b84:	e02d      	b.n	8001be2 <HAL_RCC_OscConfig+0x36e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x334>
 8001b8e:	4b76      	ldr	r3, [pc, #472]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	4a75      	ldr	r2, [pc, #468]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b94:	f023 0301 	bic.w	r3, r3, #1
 8001b98:	6213      	str	r3, [r2, #32]
 8001b9a:	4b73      	ldr	r3, [pc, #460]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	4a72      	ldr	r2, [pc, #456]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001ba0:	f023 0304 	bic.w	r3, r3, #4
 8001ba4:	6213      	str	r3, [r2, #32]
 8001ba6:	e01c      	b.n	8001be2 <HAL_RCC_OscConfig+0x36e>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	2b05      	cmp	r3, #5
 8001bae:	d10c      	bne.n	8001bca <HAL_RCC_OscConfig+0x356>
 8001bb0:	4b6d      	ldr	r3, [pc, #436]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	4a6c      	ldr	r2, [pc, #432]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001bb6:	f043 0304 	orr.w	r3, r3, #4
 8001bba:	6213      	str	r3, [r2, #32]
 8001bbc:	4b6a      	ldr	r3, [pc, #424]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	4a69      	ldr	r2, [pc, #420]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6213      	str	r3, [r2, #32]
 8001bc8:	e00b      	b.n	8001be2 <HAL_RCC_OscConfig+0x36e>
 8001bca:	4b67      	ldr	r3, [pc, #412]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	4a66      	ldr	r2, [pc, #408]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001bd0:	f023 0301 	bic.w	r3, r3, #1
 8001bd4:	6213      	str	r3, [r2, #32]
 8001bd6:	4b64      	ldr	r3, [pc, #400]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	4a63      	ldr	r2, [pc, #396]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	f023 0304 	bic.w	r3, r3, #4
 8001be0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d015      	beq.n	8001c16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bea:	f7ff fba9 	bl	8001340 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf0:	e00a      	b.n	8001c08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf2:	f7ff fba5 	bl	8001340 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e0ab      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c08:	4b57      	ldr	r3, [pc, #348]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0ee      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x37e>
 8001c14:	e014      	b.n	8001c40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c16:	f7ff fb93 	bl	8001340 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c1c:	e00a      	b.n	8001c34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1e:	f7ff fb8f 	bl	8001340 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e095      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c34:	4b4c      	ldr	r3, [pc, #304]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1ee      	bne.n	8001c1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c40:	7dfb      	ldrb	r3, [r7, #23]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d105      	bne.n	8001c52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c46:	4b48      	ldr	r3, [pc, #288]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	4a47      	ldr	r2, [pc, #284]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001c4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 8081 	beq.w	8001d5e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c5c:	4b42      	ldr	r3, [pc, #264]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 030c 	and.w	r3, r3, #12
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d061      	beq.n	8001d2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d146      	bne.n	8001cfe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c70:	4b3f      	ldr	r3, [pc, #252]	; (8001d70 <HAL_RCC_OscConfig+0x4fc>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c76:	f7ff fb63 	bl	8001340 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7ff fb5f 	bl	8001340 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e067      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c90:	4b35      	ldr	r3, [pc, #212]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f0      	bne.n	8001c7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca4:	d108      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ca6:	4b30      	ldr	r3, [pc, #192]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	492d      	ldr	r1, [pc, #180]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a19      	ldr	r1, [r3, #32]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	4927      	ldr	r1, [pc, #156]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd0:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <HAL_RCC_OscConfig+0x4fc>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7ff fb33 	bl	8001340 <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cde:	f7ff fb2f 	bl	8001340 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e037      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x46a>
 8001cfc:	e02f      	b.n	8001d5e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <HAL_RCC_OscConfig+0x4fc>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7ff fb1c 	bl	8001340 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0c:	f7ff fb18 	bl	8001340 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e020      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1e:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f0      	bne.n	8001d0c <HAL_RCC_OscConfig+0x498>
 8001d2a:	e018      	b.n	8001d5e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e013      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_RCC_OscConfig+0x4f4>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d001      	beq.n	8001d5e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40007000 	.word	0x40007000
 8001d70:	42420060 	.word	0x42420060

08001d74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0d0      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d88:	4b6a      	ldr	r3, [pc, #424]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d910      	bls.n	8001db8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d96:	4b67      	ldr	r3, [pc, #412]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 0207 	bic.w	r2, r3, #7
 8001d9e:	4965      	ldr	r1, [pc, #404]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da6:	4b63      	ldr	r3, [pc, #396]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0b8      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d020      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd0:	4b59      	ldr	r3, [pc, #356]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	4a58      	ldr	r2, [pc, #352]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001de8:	4b53      	ldr	r3, [pc, #332]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4a52      	ldr	r2, [pc, #328]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001df2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df4:	4b50      	ldr	r3, [pc, #320]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	494d      	ldr	r1, [pc, #308]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d040      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d107      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1a:	4b47      	ldr	r3, [pc, #284]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d115      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e07f      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d107      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e32:	4b41      	ldr	r3, [pc, #260]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d109      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e073      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e42:	4b3d      	ldr	r3, [pc, #244]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e06b      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e52:	4b39      	ldr	r3, [pc, #228]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f023 0203 	bic.w	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	4936      	ldr	r1, [pc, #216]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e64:	f7ff fa6c 	bl	8001340 <HAL_GetTick>
 8001e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6a:	e00a      	b.n	8001e82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e6c:	f7ff fa68 	bl	8001340 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e053      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e82:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 020c 	and.w	r2, r3, #12
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d1eb      	bne.n	8001e6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e94:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d210      	bcs.n	8001ec4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea2:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 0207 	bic.w	r2, r3, #7
 8001eaa:	4922      	ldr	r1, [pc, #136]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb2:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d001      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e032      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d008      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed0:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	4916      	ldr	r1, [pc, #88]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d009      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	490e      	ldr	r1, [pc, #56]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f02:	f000 f821 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8001f06:	4601      	mov	r1, r0
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <HAL_RCC_ClockConfig+0x1c8>)
 8001f14:	5cd3      	ldrb	r3, [r2, r3]
 8001f16:	fa21 f303 	lsr.w	r3, r1, r3
 8001f1a:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <HAL_RCC_ClockConfig+0x1cc>)
 8001f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_RCC_ClockConfig+0x1d0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff f9ca 	bl	80012bc <HAL_InitTick>

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40022000 	.word	0x40022000
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	0800374c 	.word	0x0800374c
 8001f40:	20000024 	.word	0x20000024
 8001f44:	20000028 	.word	0x20000028

08001f48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f48:	b490      	push	{r4, r7}
 8001f4a:	b08a      	sub	sp, #40	; 0x28
 8001f4c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f4e:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f50:	1d3c      	adds	r4, r7, #4
 8001f52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f58:	4b28      	ldr	r3, [pc, #160]	; (8001ffc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
 8001f66:	2300      	movs	r3, #0
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f72:	4b23      	ldr	r3, [pc, #140]	; (8002000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d002      	beq.n	8001f88 <HAL_RCC_GetSysClockFreq+0x40>
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d003      	beq.n	8001f8e <HAL_RCC_GetSysClockFreq+0x46>
 8001f86:	e02d      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f88:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f8a:	623b      	str	r3, [r7, #32]
      break;
 8001f8c:	e02d      	b.n	8001fea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	0c9b      	lsrs	r3, r3, #18
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fa0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d013      	beq.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fac:	4b14      	ldr	r3, [pc, #80]	; (8002000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	0c5b      	lsrs	r3, r3, #17
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fba:	4413      	add	r3, r2
 8001fbc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001fc0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	4a0f      	ldr	r2, [pc, #60]	; (8002004 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fc6:	fb02 f203 	mul.w	r2, r2, r3
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd2:	e004      	b.n	8001fde <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	4a0c      	ldr	r2, [pc, #48]	; (8002008 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fd8:	fb02 f303 	mul.w	r3, r2, r3
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	623b      	str	r3, [r7, #32]
      break;
 8001fe2:	e002      	b.n	8001fea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fe4:	4b07      	ldr	r3, [pc, #28]	; (8002004 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fe6:	623b      	str	r3, [r7, #32]
      break;
 8001fe8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fea:	6a3b      	ldr	r3, [r7, #32]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3728      	adds	r7, #40	; 0x28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc90      	pop	{r4, r7}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	08002f54 	.word	0x08002f54
 8001ffc:	08002f64 	.word	0x08002f64
 8002000:	40021000 	.word	0x40021000
 8002004:	007a1200 	.word	0x007a1200
 8002008:	003d0900 	.word	0x003d0900

0800200c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <RCC_Delay+0x34>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <RCC_Delay+0x38>)
 800201a:	fba2 2303 	umull	r2, r3, r2, r3
 800201e:	0a5b      	lsrs	r3, r3, #9
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	fb02 f303 	mul.w	r3, r2, r3
 8002026:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002028:	bf00      	nop
  }
  while (Delay --);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1e5a      	subs	r2, r3, #1
 800202e:	60fa      	str	r2, [r7, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1f9      	bne.n	8002028 <RCC_Delay+0x1c>
}
 8002034:	bf00      	nop
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	20000024 	.word	0x20000024
 8002044:	10624dd3 	.word	0x10624dd3

08002048 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e076      	b.n	8002148 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	2b00      	cmp	r3, #0
 8002060:	d108      	bne.n	8002074 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800206a:	d009      	beq.n	8002080 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
 8002072:	e005      	b.n	8002080 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d106      	bne.n	80020a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff f830 	bl	8001100 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002104:	ea42 0103 	orr.w	r1, r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	0c1a      	lsrs	r2, r3, #16
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f002 0204 	and.w	r2, r2, #4
 8002126:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002136:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	4613      	mov	r3, r2
 800215e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800216a:	2b01      	cmp	r3, #1
 800216c:	d101      	bne.n	8002172 <HAL_SPI_Transmit+0x22>
 800216e:	2302      	movs	r3, #2
 8002170:	e126      	b.n	80023c0 <HAL_SPI_Transmit+0x270>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800217a:	f7ff f8e1 	bl	8001340 <HAL_GetTick>
 800217e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002180:	88fb      	ldrh	r3, [r7, #6]
 8002182:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b01      	cmp	r3, #1
 800218e:	d002      	beq.n	8002196 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002190:	2302      	movs	r3, #2
 8002192:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002194:	e10b      	b.n	80023ae <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <HAL_SPI_Transmit+0x52>
 800219c:	88fb      	ldrh	r3, [r7, #6]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d102      	bne.n	80021a8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021a6:	e102      	b.n	80023ae <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2203      	movs	r2, #3
 80021ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	88fa      	ldrh	r2, [r7, #6]
 80021c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	88fa      	ldrh	r2, [r7, #6]
 80021c6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021ee:	d10f      	bne.n	8002210 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800220e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221a:	2b40      	cmp	r3, #64	; 0x40
 800221c:	d007      	beq.n	800222e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800222c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002236:	d14b      	bne.n	80022d0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d002      	beq.n	8002246 <HAL_SPI_Transmit+0xf6>
 8002240:	8afb      	ldrh	r3, [r7, #22]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d13e      	bne.n	80022c4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	881a      	ldrh	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	1c9a      	adds	r2, r3, #2
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800226a:	e02b      	b.n	80022c4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b02      	cmp	r3, #2
 8002278:	d112      	bne.n	80022a0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	881a      	ldrh	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	1c9a      	adds	r2, r3, #2
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002294:	b29b      	uxth	r3, r3
 8002296:	3b01      	subs	r3, #1
 8002298:	b29a      	uxth	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	86da      	strh	r2, [r3, #54]	; 0x36
 800229e:	e011      	b.n	80022c4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022a0:	f7ff f84e 	bl	8001340 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d803      	bhi.n	80022b8 <HAL_SPI_Transmit+0x168>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b6:	d102      	bne.n	80022be <HAL_SPI_Transmit+0x16e>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d102      	bne.n	80022c4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022c2:	e074      	b.n	80023ae <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1ce      	bne.n	800226c <HAL_SPI_Transmit+0x11c>
 80022ce:	e04c      	b.n	800236a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <HAL_SPI_Transmit+0x18e>
 80022d8:	8afb      	ldrh	r3, [r7, #22]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d140      	bne.n	8002360 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	330c      	adds	r3, #12
 80022e8:	7812      	ldrb	r2, [r2, #0]
 80022ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002304:	e02c      	b.n	8002360 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b02      	cmp	r3, #2
 8002312:	d113      	bne.n	800233c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	330c      	adds	r3, #12
 800231e:	7812      	ldrb	r2, [r2, #0]
 8002320:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002330:	b29b      	uxth	r3, r3
 8002332:	3b01      	subs	r3, #1
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	86da      	strh	r2, [r3, #54]	; 0x36
 800233a:	e011      	b.n	8002360 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800233c:	f7ff f800 	bl	8001340 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d803      	bhi.n	8002354 <HAL_SPI_Transmit+0x204>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002352:	d102      	bne.n	800235a <HAL_SPI_Transmit+0x20a>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d102      	bne.n	8002360 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800235e:	e026      	b.n	80023ae <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002364:	b29b      	uxth	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1cd      	bne.n	8002306 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	6839      	ldr	r1, [r7, #0]
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f8b2 	bl	80024d8 <SPI_EndRxTxTransaction>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2220      	movs	r2, #32
 800237e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10a      	bne.n	800239e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002388:	2300      	movs	r3, #0
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d002      	beq.n	80023ac <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	77fb      	strb	r3, [r7, #31]
 80023aa:	e000      	b.n	80023ae <HAL_SPI_Transmit+0x25e>
  }

error:
 80023ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023be:	7ffb      	ldrb	r3, [r7, #31]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3720      	adds	r7, #32
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	603b      	str	r3, [r7, #0]
 80023d4:	4613      	mov	r3, r2
 80023d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80023d8:	f7fe ffb2 	bl	8001340 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	4413      	add	r3, r2
 80023e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80023e8:	f7fe ffaa 	bl	8001340 <HAL_GetTick>
 80023ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80023ee:	4b39      	ldr	r3, [pc, #228]	; (80024d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	015b      	lsls	r3, r3, #5
 80023f4:	0d1b      	lsrs	r3, r3, #20
 80023f6:	69fa      	ldr	r2, [r7, #28]
 80023f8:	fb02 f303 	mul.w	r3, r2, r3
 80023fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023fe:	e054      	b.n	80024aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002406:	d050      	beq.n	80024aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002408:	f7fe ff9a 	bl	8001340 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	69fa      	ldr	r2, [r7, #28]
 8002414:	429a      	cmp	r2, r3
 8002416:	d902      	bls.n	800241e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d13d      	bne.n	800249a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800242c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002436:	d111      	bne.n	800245c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002440:	d004      	beq.n	800244c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800244a:	d107      	bne.n	800245c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800245a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002464:	d10f      	bne.n	8002486 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002484:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e017      	b.n	80024ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4013      	ands	r3, r2
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	bf0c      	ite	eq
 80024ba:	2301      	moveq	r3, #1
 80024bc:	2300      	movne	r3, #0
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d19b      	bne.n	8002400 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3720      	adds	r7, #32
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000024 	.word	0x20000024

080024d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af02      	add	r7, sp, #8
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2200      	movs	r2, #0
 80024ec:	2180      	movs	r1, #128	; 0x80
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f7ff ff6a 	bl	80023c8 <SPI_WaitFlagStateUntilTimeout>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d007      	beq.n	800250a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fe:	f043 0220 	orr.w	r2, r3, #32
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e000      	b.n	800250c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <__errno>:
 8002514:	4b01      	ldr	r3, [pc, #4]	; (800251c <__errno+0x8>)
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000030 	.word	0x20000030

08002520 <__libc_init_array>:
 8002520:	b570      	push	{r4, r5, r6, lr}
 8002522:	2500      	movs	r5, #0
 8002524:	4e0c      	ldr	r6, [pc, #48]	; (8002558 <__libc_init_array+0x38>)
 8002526:	4c0d      	ldr	r4, [pc, #52]	; (800255c <__libc_init_array+0x3c>)
 8002528:	1ba4      	subs	r4, r4, r6
 800252a:	10a4      	asrs	r4, r4, #2
 800252c:	42a5      	cmp	r5, r4
 800252e:	d109      	bne.n	8002544 <__libc_init_array+0x24>
 8002530:	f000 fcc8 	bl	8002ec4 <_init>
 8002534:	2500      	movs	r5, #0
 8002536:	4e0a      	ldr	r6, [pc, #40]	; (8002560 <__libc_init_array+0x40>)
 8002538:	4c0a      	ldr	r4, [pc, #40]	; (8002564 <__libc_init_array+0x44>)
 800253a:	1ba4      	subs	r4, r4, r6
 800253c:	10a4      	asrs	r4, r4, #2
 800253e:	42a5      	cmp	r5, r4
 8002540:	d105      	bne.n	800254e <__libc_init_array+0x2e>
 8002542:	bd70      	pop	{r4, r5, r6, pc}
 8002544:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002548:	4798      	blx	r3
 800254a:	3501      	adds	r5, #1
 800254c:	e7ee      	b.n	800252c <__libc_init_array+0xc>
 800254e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002552:	4798      	blx	r3
 8002554:	3501      	adds	r5, #1
 8002556:	e7f2      	b.n	800253e <__libc_init_array+0x1e>
 8002558:	080037f0 	.word	0x080037f0
 800255c:	080037f0 	.word	0x080037f0
 8002560:	080037f0 	.word	0x080037f0
 8002564:	080037f4 	.word	0x080037f4

08002568 <malloc>:
 8002568:	4b02      	ldr	r3, [pc, #8]	; (8002574 <malloc+0xc>)
 800256a:	4601      	mov	r1, r0
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	f000 b857 	b.w	8002620 <_malloc_r>
 8002572:	bf00      	nop
 8002574:	20000030 	.word	0x20000030

08002578 <memset>:
 8002578:	4603      	mov	r3, r0
 800257a:	4402      	add	r2, r0
 800257c:	4293      	cmp	r3, r2
 800257e:	d100      	bne.n	8002582 <memset+0xa>
 8002580:	4770      	bx	lr
 8002582:	f803 1b01 	strb.w	r1, [r3], #1
 8002586:	e7f9      	b.n	800257c <memset+0x4>

08002588 <_free_r>:
 8002588:	b538      	push	{r3, r4, r5, lr}
 800258a:	4605      	mov	r5, r0
 800258c:	2900      	cmp	r1, #0
 800258e:	d043      	beq.n	8002618 <_free_r+0x90>
 8002590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002594:	1f0c      	subs	r4, r1, #4
 8002596:	2b00      	cmp	r3, #0
 8002598:	bfb8      	it	lt
 800259a:	18e4      	addlt	r4, r4, r3
 800259c:	f000 f94e 	bl	800283c <__malloc_lock>
 80025a0:	4a1e      	ldr	r2, [pc, #120]	; (800261c <_free_r+0x94>)
 80025a2:	6813      	ldr	r3, [r2, #0]
 80025a4:	4610      	mov	r0, r2
 80025a6:	b933      	cbnz	r3, 80025b6 <_free_r+0x2e>
 80025a8:	6063      	str	r3, [r4, #4]
 80025aa:	6014      	str	r4, [r2, #0]
 80025ac:	4628      	mov	r0, r5
 80025ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025b2:	f000 b944 	b.w	800283e <__malloc_unlock>
 80025b6:	42a3      	cmp	r3, r4
 80025b8:	d90b      	bls.n	80025d2 <_free_r+0x4a>
 80025ba:	6821      	ldr	r1, [r4, #0]
 80025bc:	1862      	adds	r2, r4, r1
 80025be:	4293      	cmp	r3, r2
 80025c0:	bf01      	itttt	eq
 80025c2:	681a      	ldreq	r2, [r3, #0]
 80025c4:	685b      	ldreq	r3, [r3, #4]
 80025c6:	1852      	addeq	r2, r2, r1
 80025c8:	6022      	streq	r2, [r4, #0]
 80025ca:	6063      	str	r3, [r4, #4]
 80025cc:	6004      	str	r4, [r0, #0]
 80025ce:	e7ed      	b.n	80025ac <_free_r+0x24>
 80025d0:	4613      	mov	r3, r2
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	b10a      	cbz	r2, 80025da <_free_r+0x52>
 80025d6:	42a2      	cmp	r2, r4
 80025d8:	d9fa      	bls.n	80025d0 <_free_r+0x48>
 80025da:	6819      	ldr	r1, [r3, #0]
 80025dc:	1858      	adds	r0, r3, r1
 80025de:	42a0      	cmp	r0, r4
 80025e0:	d10b      	bne.n	80025fa <_free_r+0x72>
 80025e2:	6820      	ldr	r0, [r4, #0]
 80025e4:	4401      	add	r1, r0
 80025e6:	1858      	adds	r0, r3, r1
 80025e8:	4282      	cmp	r2, r0
 80025ea:	6019      	str	r1, [r3, #0]
 80025ec:	d1de      	bne.n	80025ac <_free_r+0x24>
 80025ee:	6810      	ldr	r0, [r2, #0]
 80025f0:	6852      	ldr	r2, [r2, #4]
 80025f2:	4401      	add	r1, r0
 80025f4:	6019      	str	r1, [r3, #0]
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	e7d8      	b.n	80025ac <_free_r+0x24>
 80025fa:	d902      	bls.n	8002602 <_free_r+0x7a>
 80025fc:	230c      	movs	r3, #12
 80025fe:	602b      	str	r3, [r5, #0]
 8002600:	e7d4      	b.n	80025ac <_free_r+0x24>
 8002602:	6820      	ldr	r0, [r4, #0]
 8002604:	1821      	adds	r1, r4, r0
 8002606:	428a      	cmp	r2, r1
 8002608:	bf01      	itttt	eq
 800260a:	6811      	ldreq	r1, [r2, #0]
 800260c:	6852      	ldreq	r2, [r2, #4]
 800260e:	1809      	addeq	r1, r1, r0
 8002610:	6021      	streq	r1, [r4, #0]
 8002612:	6062      	str	r2, [r4, #4]
 8002614:	605c      	str	r4, [r3, #4]
 8002616:	e7c9      	b.n	80025ac <_free_r+0x24>
 8002618:	bd38      	pop	{r3, r4, r5, pc}
 800261a:	bf00      	nop
 800261c:	200000cc 	.word	0x200000cc

08002620 <_malloc_r>:
 8002620:	b570      	push	{r4, r5, r6, lr}
 8002622:	1ccd      	adds	r5, r1, #3
 8002624:	f025 0503 	bic.w	r5, r5, #3
 8002628:	3508      	adds	r5, #8
 800262a:	2d0c      	cmp	r5, #12
 800262c:	bf38      	it	cc
 800262e:	250c      	movcc	r5, #12
 8002630:	2d00      	cmp	r5, #0
 8002632:	4606      	mov	r6, r0
 8002634:	db01      	blt.n	800263a <_malloc_r+0x1a>
 8002636:	42a9      	cmp	r1, r5
 8002638:	d903      	bls.n	8002642 <_malloc_r+0x22>
 800263a:	230c      	movs	r3, #12
 800263c:	6033      	str	r3, [r6, #0]
 800263e:	2000      	movs	r0, #0
 8002640:	bd70      	pop	{r4, r5, r6, pc}
 8002642:	f000 f8fb 	bl	800283c <__malloc_lock>
 8002646:	4a21      	ldr	r2, [pc, #132]	; (80026cc <_malloc_r+0xac>)
 8002648:	6814      	ldr	r4, [r2, #0]
 800264a:	4621      	mov	r1, r4
 800264c:	b991      	cbnz	r1, 8002674 <_malloc_r+0x54>
 800264e:	4c20      	ldr	r4, [pc, #128]	; (80026d0 <_malloc_r+0xb0>)
 8002650:	6823      	ldr	r3, [r4, #0]
 8002652:	b91b      	cbnz	r3, 800265c <_malloc_r+0x3c>
 8002654:	4630      	mov	r0, r6
 8002656:	f000 f895 	bl	8002784 <_sbrk_r>
 800265a:	6020      	str	r0, [r4, #0]
 800265c:	4629      	mov	r1, r5
 800265e:	4630      	mov	r0, r6
 8002660:	f000 f890 	bl	8002784 <_sbrk_r>
 8002664:	1c43      	adds	r3, r0, #1
 8002666:	d124      	bne.n	80026b2 <_malloc_r+0x92>
 8002668:	230c      	movs	r3, #12
 800266a:	4630      	mov	r0, r6
 800266c:	6033      	str	r3, [r6, #0]
 800266e:	f000 f8e6 	bl	800283e <__malloc_unlock>
 8002672:	e7e4      	b.n	800263e <_malloc_r+0x1e>
 8002674:	680b      	ldr	r3, [r1, #0]
 8002676:	1b5b      	subs	r3, r3, r5
 8002678:	d418      	bmi.n	80026ac <_malloc_r+0x8c>
 800267a:	2b0b      	cmp	r3, #11
 800267c:	d90f      	bls.n	800269e <_malloc_r+0x7e>
 800267e:	600b      	str	r3, [r1, #0]
 8002680:	18cc      	adds	r4, r1, r3
 8002682:	50cd      	str	r5, [r1, r3]
 8002684:	4630      	mov	r0, r6
 8002686:	f000 f8da 	bl	800283e <__malloc_unlock>
 800268a:	f104 000b 	add.w	r0, r4, #11
 800268e:	1d23      	adds	r3, r4, #4
 8002690:	f020 0007 	bic.w	r0, r0, #7
 8002694:	1ac3      	subs	r3, r0, r3
 8002696:	d0d3      	beq.n	8002640 <_malloc_r+0x20>
 8002698:	425a      	negs	r2, r3
 800269a:	50e2      	str	r2, [r4, r3]
 800269c:	e7d0      	b.n	8002640 <_malloc_r+0x20>
 800269e:	684b      	ldr	r3, [r1, #4]
 80026a0:	428c      	cmp	r4, r1
 80026a2:	bf16      	itet	ne
 80026a4:	6063      	strne	r3, [r4, #4]
 80026a6:	6013      	streq	r3, [r2, #0]
 80026a8:	460c      	movne	r4, r1
 80026aa:	e7eb      	b.n	8002684 <_malloc_r+0x64>
 80026ac:	460c      	mov	r4, r1
 80026ae:	6849      	ldr	r1, [r1, #4]
 80026b0:	e7cc      	b.n	800264c <_malloc_r+0x2c>
 80026b2:	1cc4      	adds	r4, r0, #3
 80026b4:	f024 0403 	bic.w	r4, r4, #3
 80026b8:	42a0      	cmp	r0, r4
 80026ba:	d005      	beq.n	80026c8 <_malloc_r+0xa8>
 80026bc:	1a21      	subs	r1, r4, r0
 80026be:	4630      	mov	r0, r6
 80026c0:	f000 f860 	bl	8002784 <_sbrk_r>
 80026c4:	3001      	adds	r0, #1
 80026c6:	d0cf      	beq.n	8002668 <_malloc_r+0x48>
 80026c8:	6025      	str	r5, [r4, #0]
 80026ca:	e7db      	b.n	8002684 <_malloc_r+0x64>
 80026cc:	200000cc 	.word	0x200000cc
 80026d0:	200000d0 	.word	0x200000d0

080026d4 <srand>:
 80026d4:	b538      	push	{r3, r4, r5, lr}
 80026d6:	4b0d      	ldr	r3, [pc, #52]	; (800270c <srand+0x38>)
 80026d8:	4605      	mov	r5, r0
 80026da:	681c      	ldr	r4, [r3, #0]
 80026dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026de:	b97b      	cbnz	r3, 8002700 <srand+0x2c>
 80026e0:	2018      	movs	r0, #24
 80026e2:	f7ff ff41 	bl	8002568 <malloc>
 80026e6:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <srand+0x3c>)
 80026e8:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <srand+0x40>)
 80026ea:	63a0      	str	r0, [r4, #56]	; 0x38
 80026ec:	e9c0 2300 	strd	r2, r3, [r0]
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <srand+0x44>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	6083      	str	r3, [r0, #8]
 80026f6:	230b      	movs	r3, #11
 80026f8:	8183      	strh	r3, [r0, #12]
 80026fa:	2300      	movs	r3, #0
 80026fc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002700:	2200      	movs	r2, #0
 8002702:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002704:	611d      	str	r5, [r3, #16]
 8002706:	615a      	str	r2, [r3, #20]
 8002708:	bd38      	pop	{r3, r4, r5, pc}
 800270a:	bf00      	nop
 800270c:	20000030 	.word	0x20000030
 8002710:	abcd330e 	.word	0xabcd330e
 8002714:	e66d1234 	.word	0xe66d1234
 8002718:	0005deec 	.word	0x0005deec

0800271c <rand>:
 800271c:	b538      	push	{r3, r4, r5, lr}
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <rand+0x50>)
 8002720:	681c      	ldr	r4, [r3, #0]
 8002722:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002724:	b97b      	cbnz	r3, 8002746 <rand+0x2a>
 8002726:	2018      	movs	r0, #24
 8002728:	f7ff ff1e 	bl	8002568 <malloc>
 800272c:	4a10      	ldr	r2, [pc, #64]	; (8002770 <rand+0x54>)
 800272e:	4b11      	ldr	r3, [pc, #68]	; (8002774 <rand+0x58>)
 8002730:	63a0      	str	r0, [r4, #56]	; 0x38
 8002732:	e9c0 2300 	strd	r2, r3, [r0]
 8002736:	4b10      	ldr	r3, [pc, #64]	; (8002778 <rand+0x5c>)
 8002738:	2201      	movs	r2, #1
 800273a:	6083      	str	r3, [r0, #8]
 800273c:	230b      	movs	r3, #11
 800273e:	8183      	strh	r3, [r0, #12]
 8002740:	2300      	movs	r3, #0
 8002742:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002746:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002748:	480c      	ldr	r0, [pc, #48]	; (800277c <rand+0x60>)
 800274a:	690a      	ldr	r2, [r1, #16]
 800274c:	694b      	ldr	r3, [r1, #20]
 800274e:	4350      	muls	r0, r2
 8002750:	4c0b      	ldr	r4, [pc, #44]	; (8002780 <rand+0x64>)
 8002752:	fb04 0003 	mla	r0, r4, r3, r0
 8002756:	fba2 2304 	umull	r2, r3, r2, r4
 800275a:	4403      	add	r3, r0
 800275c:	1c54      	adds	r4, r2, #1
 800275e:	f143 0500 	adc.w	r5, r3, #0
 8002762:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8002766:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800276a:	bd38      	pop	{r3, r4, r5, pc}
 800276c:	20000030 	.word	0x20000030
 8002770:	abcd330e 	.word	0xabcd330e
 8002774:	e66d1234 	.word	0xe66d1234
 8002778:	0005deec 	.word	0x0005deec
 800277c:	5851f42d 	.word	0x5851f42d
 8002780:	4c957f2d 	.word	0x4c957f2d

08002784 <_sbrk_r>:
 8002784:	b538      	push	{r3, r4, r5, lr}
 8002786:	2300      	movs	r3, #0
 8002788:	4c05      	ldr	r4, [pc, #20]	; (80027a0 <_sbrk_r+0x1c>)
 800278a:	4605      	mov	r5, r0
 800278c:	4608      	mov	r0, r1
 800278e:	6023      	str	r3, [r4, #0]
 8002790:	f7fe fd1c 	bl	80011cc <_sbrk>
 8002794:	1c43      	adds	r3, r0, #1
 8002796:	d102      	bne.n	800279e <_sbrk_r+0x1a>
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	b103      	cbz	r3, 800279e <_sbrk_r+0x1a>
 800279c:	602b      	str	r3, [r5, #0]
 800279e:	bd38      	pop	{r3, r4, r5, pc}
 80027a0:	200001c0 	.word	0x200001c0

080027a4 <siprintf>:
 80027a4:	b40e      	push	{r1, r2, r3}
 80027a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80027aa:	b500      	push	{lr}
 80027ac:	b09c      	sub	sp, #112	; 0x70
 80027ae:	ab1d      	add	r3, sp, #116	; 0x74
 80027b0:	9002      	str	r0, [sp, #8]
 80027b2:	9006      	str	r0, [sp, #24]
 80027b4:	9107      	str	r1, [sp, #28]
 80027b6:	9104      	str	r1, [sp, #16]
 80027b8:	4808      	ldr	r0, [pc, #32]	; (80027dc <siprintf+0x38>)
 80027ba:	4909      	ldr	r1, [pc, #36]	; (80027e0 <siprintf+0x3c>)
 80027bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80027c0:	9105      	str	r1, [sp, #20]
 80027c2:	6800      	ldr	r0, [r0, #0]
 80027c4:	a902      	add	r1, sp, #8
 80027c6:	9301      	str	r3, [sp, #4]
 80027c8:	f000 f894 	bl	80028f4 <_svfiprintf_r>
 80027cc:	2200      	movs	r2, #0
 80027ce:	9b02      	ldr	r3, [sp, #8]
 80027d0:	701a      	strb	r2, [r3, #0]
 80027d2:	b01c      	add	sp, #112	; 0x70
 80027d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80027d8:	b003      	add	sp, #12
 80027da:	4770      	bx	lr
 80027dc:	20000030 	.word	0x20000030
 80027e0:	ffff0208 	.word	0xffff0208

080027e4 <time>:
 80027e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80027e6:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <time+0x30>)
 80027e8:	4604      	mov	r4, r0
 80027ea:	2200      	movs	r2, #0
 80027ec:	4669      	mov	r1, sp
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	f000 f812 	bl	8002818 <_gettimeofday_r>
 80027f4:	2800      	cmp	r0, #0
 80027f6:	da05      	bge.n	8002804 <time+0x20>
 80027f8:	f04f 32ff 	mov.w	r2, #4294967295
 80027fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002800:	e9cd 2300 	strd	r2, r3, [sp]
 8002804:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002808:	b10c      	cbz	r4, 800280e <time+0x2a>
 800280a:	e9c4 0100 	strd	r0, r1, [r4]
 800280e:	b004      	add	sp, #16
 8002810:	bd10      	pop	{r4, pc}
 8002812:	bf00      	nop
 8002814:	20000030 	.word	0x20000030

08002818 <_gettimeofday_r>:
 8002818:	b538      	push	{r3, r4, r5, lr}
 800281a:	2300      	movs	r3, #0
 800281c:	4c06      	ldr	r4, [pc, #24]	; (8002838 <_gettimeofday_r+0x20>)
 800281e:	4605      	mov	r5, r0
 8002820:	4608      	mov	r0, r1
 8002822:	4611      	mov	r1, r2
 8002824:	6023      	str	r3, [r4, #0]
 8002826:	f000 fb45 	bl	8002eb4 <_gettimeofday>
 800282a:	1c43      	adds	r3, r0, #1
 800282c:	d102      	bne.n	8002834 <_gettimeofday_r+0x1c>
 800282e:	6823      	ldr	r3, [r4, #0]
 8002830:	b103      	cbz	r3, 8002834 <_gettimeofday_r+0x1c>
 8002832:	602b      	str	r3, [r5, #0]
 8002834:	bd38      	pop	{r3, r4, r5, pc}
 8002836:	bf00      	nop
 8002838:	200001c0 	.word	0x200001c0

0800283c <__malloc_lock>:
 800283c:	4770      	bx	lr

0800283e <__malloc_unlock>:
 800283e:	4770      	bx	lr

08002840 <__ssputs_r>:
 8002840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002844:	688e      	ldr	r6, [r1, #8]
 8002846:	4682      	mov	sl, r0
 8002848:	429e      	cmp	r6, r3
 800284a:	460c      	mov	r4, r1
 800284c:	4690      	mov	r8, r2
 800284e:	4699      	mov	r9, r3
 8002850:	d837      	bhi.n	80028c2 <__ssputs_r+0x82>
 8002852:	898a      	ldrh	r2, [r1, #12]
 8002854:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002858:	d031      	beq.n	80028be <__ssputs_r+0x7e>
 800285a:	2302      	movs	r3, #2
 800285c:	6825      	ldr	r5, [r4, #0]
 800285e:	6909      	ldr	r1, [r1, #16]
 8002860:	1a6f      	subs	r7, r5, r1
 8002862:	6965      	ldr	r5, [r4, #20]
 8002864:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002868:	fb95 f5f3 	sdiv	r5, r5, r3
 800286c:	f109 0301 	add.w	r3, r9, #1
 8002870:	443b      	add	r3, r7
 8002872:	429d      	cmp	r5, r3
 8002874:	bf38      	it	cc
 8002876:	461d      	movcc	r5, r3
 8002878:	0553      	lsls	r3, r2, #21
 800287a:	d530      	bpl.n	80028de <__ssputs_r+0x9e>
 800287c:	4629      	mov	r1, r5
 800287e:	f7ff fecf 	bl	8002620 <_malloc_r>
 8002882:	4606      	mov	r6, r0
 8002884:	b950      	cbnz	r0, 800289c <__ssputs_r+0x5c>
 8002886:	230c      	movs	r3, #12
 8002888:	f04f 30ff 	mov.w	r0, #4294967295
 800288c:	f8ca 3000 	str.w	r3, [sl]
 8002890:	89a3      	ldrh	r3, [r4, #12]
 8002892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002896:	81a3      	strh	r3, [r4, #12]
 8002898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800289c:	463a      	mov	r2, r7
 800289e:	6921      	ldr	r1, [r4, #16]
 80028a0:	f000 fab6 	bl	8002e10 <memcpy>
 80028a4:	89a3      	ldrh	r3, [r4, #12]
 80028a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80028aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ae:	81a3      	strh	r3, [r4, #12]
 80028b0:	6126      	str	r6, [r4, #16]
 80028b2:	443e      	add	r6, r7
 80028b4:	6026      	str	r6, [r4, #0]
 80028b6:	464e      	mov	r6, r9
 80028b8:	6165      	str	r5, [r4, #20]
 80028ba:	1bed      	subs	r5, r5, r7
 80028bc:	60a5      	str	r5, [r4, #8]
 80028be:	454e      	cmp	r6, r9
 80028c0:	d900      	bls.n	80028c4 <__ssputs_r+0x84>
 80028c2:	464e      	mov	r6, r9
 80028c4:	4632      	mov	r2, r6
 80028c6:	4641      	mov	r1, r8
 80028c8:	6820      	ldr	r0, [r4, #0]
 80028ca:	f000 faac 	bl	8002e26 <memmove>
 80028ce:	68a3      	ldr	r3, [r4, #8]
 80028d0:	2000      	movs	r0, #0
 80028d2:	1b9b      	subs	r3, r3, r6
 80028d4:	60a3      	str	r3, [r4, #8]
 80028d6:	6823      	ldr	r3, [r4, #0]
 80028d8:	441e      	add	r6, r3
 80028da:	6026      	str	r6, [r4, #0]
 80028dc:	e7dc      	b.n	8002898 <__ssputs_r+0x58>
 80028de:	462a      	mov	r2, r5
 80028e0:	f000 faba 	bl	8002e58 <_realloc_r>
 80028e4:	4606      	mov	r6, r0
 80028e6:	2800      	cmp	r0, #0
 80028e8:	d1e2      	bne.n	80028b0 <__ssputs_r+0x70>
 80028ea:	6921      	ldr	r1, [r4, #16]
 80028ec:	4650      	mov	r0, sl
 80028ee:	f7ff fe4b 	bl	8002588 <_free_r>
 80028f2:	e7c8      	b.n	8002886 <__ssputs_r+0x46>

080028f4 <_svfiprintf_r>:
 80028f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028f8:	461d      	mov	r5, r3
 80028fa:	898b      	ldrh	r3, [r1, #12]
 80028fc:	b09d      	sub	sp, #116	; 0x74
 80028fe:	061f      	lsls	r7, r3, #24
 8002900:	4680      	mov	r8, r0
 8002902:	460c      	mov	r4, r1
 8002904:	4616      	mov	r6, r2
 8002906:	d50f      	bpl.n	8002928 <_svfiprintf_r+0x34>
 8002908:	690b      	ldr	r3, [r1, #16]
 800290a:	b96b      	cbnz	r3, 8002928 <_svfiprintf_r+0x34>
 800290c:	2140      	movs	r1, #64	; 0x40
 800290e:	f7ff fe87 	bl	8002620 <_malloc_r>
 8002912:	6020      	str	r0, [r4, #0]
 8002914:	6120      	str	r0, [r4, #16]
 8002916:	b928      	cbnz	r0, 8002924 <_svfiprintf_r+0x30>
 8002918:	230c      	movs	r3, #12
 800291a:	f8c8 3000 	str.w	r3, [r8]
 800291e:	f04f 30ff 	mov.w	r0, #4294967295
 8002922:	e0c8      	b.n	8002ab6 <_svfiprintf_r+0x1c2>
 8002924:	2340      	movs	r3, #64	; 0x40
 8002926:	6163      	str	r3, [r4, #20]
 8002928:	2300      	movs	r3, #0
 800292a:	9309      	str	r3, [sp, #36]	; 0x24
 800292c:	2320      	movs	r3, #32
 800292e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002932:	2330      	movs	r3, #48	; 0x30
 8002934:	f04f 0b01 	mov.w	fp, #1
 8002938:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800293c:	9503      	str	r5, [sp, #12]
 800293e:	4637      	mov	r7, r6
 8002940:	463d      	mov	r5, r7
 8002942:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002946:	b10b      	cbz	r3, 800294c <_svfiprintf_r+0x58>
 8002948:	2b25      	cmp	r3, #37	; 0x25
 800294a:	d13e      	bne.n	80029ca <_svfiprintf_r+0xd6>
 800294c:	ebb7 0a06 	subs.w	sl, r7, r6
 8002950:	d00b      	beq.n	800296a <_svfiprintf_r+0x76>
 8002952:	4653      	mov	r3, sl
 8002954:	4632      	mov	r2, r6
 8002956:	4621      	mov	r1, r4
 8002958:	4640      	mov	r0, r8
 800295a:	f7ff ff71 	bl	8002840 <__ssputs_r>
 800295e:	3001      	adds	r0, #1
 8002960:	f000 80a4 	beq.w	8002aac <_svfiprintf_r+0x1b8>
 8002964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002966:	4453      	add	r3, sl
 8002968:	9309      	str	r3, [sp, #36]	; 0x24
 800296a:	783b      	ldrb	r3, [r7, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 809d 	beq.w	8002aac <_svfiprintf_r+0x1b8>
 8002972:	2300      	movs	r3, #0
 8002974:	f04f 32ff 	mov.w	r2, #4294967295
 8002978:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800297c:	9304      	str	r3, [sp, #16]
 800297e:	9307      	str	r3, [sp, #28]
 8002980:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002984:	931a      	str	r3, [sp, #104]	; 0x68
 8002986:	462f      	mov	r7, r5
 8002988:	2205      	movs	r2, #5
 800298a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800298e:	4850      	ldr	r0, [pc, #320]	; (8002ad0 <_svfiprintf_r+0x1dc>)
 8002990:	f000 fa30 	bl	8002df4 <memchr>
 8002994:	9b04      	ldr	r3, [sp, #16]
 8002996:	b9d0      	cbnz	r0, 80029ce <_svfiprintf_r+0xda>
 8002998:	06d9      	lsls	r1, r3, #27
 800299a:	bf44      	itt	mi
 800299c:	2220      	movmi	r2, #32
 800299e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80029a2:	071a      	lsls	r2, r3, #28
 80029a4:	bf44      	itt	mi
 80029a6:	222b      	movmi	r2, #43	; 0x2b
 80029a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80029ac:	782a      	ldrb	r2, [r5, #0]
 80029ae:	2a2a      	cmp	r2, #42	; 0x2a
 80029b0:	d015      	beq.n	80029de <_svfiprintf_r+0xea>
 80029b2:	462f      	mov	r7, r5
 80029b4:	2000      	movs	r0, #0
 80029b6:	250a      	movs	r5, #10
 80029b8:	9a07      	ldr	r2, [sp, #28]
 80029ba:	4639      	mov	r1, r7
 80029bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029c0:	3b30      	subs	r3, #48	; 0x30
 80029c2:	2b09      	cmp	r3, #9
 80029c4:	d94d      	bls.n	8002a62 <_svfiprintf_r+0x16e>
 80029c6:	b1b8      	cbz	r0, 80029f8 <_svfiprintf_r+0x104>
 80029c8:	e00f      	b.n	80029ea <_svfiprintf_r+0xf6>
 80029ca:	462f      	mov	r7, r5
 80029cc:	e7b8      	b.n	8002940 <_svfiprintf_r+0x4c>
 80029ce:	4a40      	ldr	r2, [pc, #256]	; (8002ad0 <_svfiprintf_r+0x1dc>)
 80029d0:	463d      	mov	r5, r7
 80029d2:	1a80      	subs	r0, r0, r2
 80029d4:	fa0b f000 	lsl.w	r0, fp, r0
 80029d8:	4318      	orrs	r0, r3
 80029da:	9004      	str	r0, [sp, #16]
 80029dc:	e7d3      	b.n	8002986 <_svfiprintf_r+0x92>
 80029de:	9a03      	ldr	r2, [sp, #12]
 80029e0:	1d11      	adds	r1, r2, #4
 80029e2:	6812      	ldr	r2, [r2, #0]
 80029e4:	9103      	str	r1, [sp, #12]
 80029e6:	2a00      	cmp	r2, #0
 80029e8:	db01      	blt.n	80029ee <_svfiprintf_r+0xfa>
 80029ea:	9207      	str	r2, [sp, #28]
 80029ec:	e004      	b.n	80029f8 <_svfiprintf_r+0x104>
 80029ee:	4252      	negs	r2, r2
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	9207      	str	r2, [sp, #28]
 80029f6:	9304      	str	r3, [sp, #16]
 80029f8:	783b      	ldrb	r3, [r7, #0]
 80029fa:	2b2e      	cmp	r3, #46	; 0x2e
 80029fc:	d10c      	bne.n	8002a18 <_svfiprintf_r+0x124>
 80029fe:	787b      	ldrb	r3, [r7, #1]
 8002a00:	2b2a      	cmp	r3, #42	; 0x2a
 8002a02:	d133      	bne.n	8002a6c <_svfiprintf_r+0x178>
 8002a04:	9b03      	ldr	r3, [sp, #12]
 8002a06:	3702      	adds	r7, #2
 8002a08:	1d1a      	adds	r2, r3, #4
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	9203      	str	r2, [sp, #12]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	bfb8      	it	lt
 8002a12:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a16:	9305      	str	r3, [sp, #20]
 8002a18:	4d2e      	ldr	r5, [pc, #184]	; (8002ad4 <_svfiprintf_r+0x1e0>)
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	7839      	ldrb	r1, [r7, #0]
 8002a1e:	4628      	mov	r0, r5
 8002a20:	f000 f9e8 	bl	8002df4 <memchr>
 8002a24:	b138      	cbz	r0, 8002a36 <_svfiprintf_r+0x142>
 8002a26:	2340      	movs	r3, #64	; 0x40
 8002a28:	1b40      	subs	r0, r0, r5
 8002a2a:	fa03 f000 	lsl.w	r0, r3, r0
 8002a2e:	9b04      	ldr	r3, [sp, #16]
 8002a30:	3701      	adds	r7, #1
 8002a32:	4303      	orrs	r3, r0
 8002a34:	9304      	str	r3, [sp, #16]
 8002a36:	7839      	ldrb	r1, [r7, #0]
 8002a38:	2206      	movs	r2, #6
 8002a3a:	4827      	ldr	r0, [pc, #156]	; (8002ad8 <_svfiprintf_r+0x1e4>)
 8002a3c:	1c7e      	adds	r6, r7, #1
 8002a3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a42:	f000 f9d7 	bl	8002df4 <memchr>
 8002a46:	2800      	cmp	r0, #0
 8002a48:	d038      	beq.n	8002abc <_svfiprintf_r+0x1c8>
 8002a4a:	4b24      	ldr	r3, [pc, #144]	; (8002adc <_svfiprintf_r+0x1e8>)
 8002a4c:	bb13      	cbnz	r3, 8002a94 <_svfiprintf_r+0x1a0>
 8002a4e:	9b03      	ldr	r3, [sp, #12]
 8002a50:	3307      	adds	r3, #7
 8002a52:	f023 0307 	bic.w	r3, r3, #7
 8002a56:	3308      	adds	r3, #8
 8002a58:	9303      	str	r3, [sp, #12]
 8002a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a5c:	444b      	add	r3, r9
 8002a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8002a60:	e76d      	b.n	800293e <_svfiprintf_r+0x4a>
 8002a62:	fb05 3202 	mla	r2, r5, r2, r3
 8002a66:	2001      	movs	r0, #1
 8002a68:	460f      	mov	r7, r1
 8002a6a:	e7a6      	b.n	80029ba <_svfiprintf_r+0xc6>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	250a      	movs	r5, #10
 8002a70:	4619      	mov	r1, r3
 8002a72:	3701      	adds	r7, #1
 8002a74:	9305      	str	r3, [sp, #20]
 8002a76:	4638      	mov	r0, r7
 8002a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a7c:	3a30      	subs	r2, #48	; 0x30
 8002a7e:	2a09      	cmp	r2, #9
 8002a80:	d903      	bls.n	8002a8a <_svfiprintf_r+0x196>
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0c8      	beq.n	8002a18 <_svfiprintf_r+0x124>
 8002a86:	9105      	str	r1, [sp, #20]
 8002a88:	e7c6      	b.n	8002a18 <_svfiprintf_r+0x124>
 8002a8a:	fb05 2101 	mla	r1, r5, r1, r2
 8002a8e:	2301      	movs	r3, #1
 8002a90:	4607      	mov	r7, r0
 8002a92:	e7f0      	b.n	8002a76 <_svfiprintf_r+0x182>
 8002a94:	ab03      	add	r3, sp, #12
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	4622      	mov	r2, r4
 8002a9a:	4b11      	ldr	r3, [pc, #68]	; (8002ae0 <_svfiprintf_r+0x1ec>)
 8002a9c:	a904      	add	r1, sp, #16
 8002a9e:	4640      	mov	r0, r8
 8002aa0:	f3af 8000 	nop.w
 8002aa4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002aa8:	4681      	mov	r9, r0
 8002aaa:	d1d6      	bne.n	8002a5a <_svfiprintf_r+0x166>
 8002aac:	89a3      	ldrh	r3, [r4, #12]
 8002aae:	065b      	lsls	r3, r3, #25
 8002ab0:	f53f af35 	bmi.w	800291e <_svfiprintf_r+0x2a>
 8002ab4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ab6:	b01d      	add	sp, #116	; 0x74
 8002ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002abc:	ab03      	add	r3, sp, #12
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	4622      	mov	r2, r4
 8002ac2:	4b07      	ldr	r3, [pc, #28]	; (8002ae0 <_svfiprintf_r+0x1ec>)
 8002ac4:	a904      	add	r1, sp, #16
 8002ac6:	4640      	mov	r0, r8
 8002ac8:	f000 f882 	bl	8002bd0 <_printf_i>
 8002acc:	e7ea      	b.n	8002aa4 <_svfiprintf_r+0x1b0>
 8002ace:	bf00      	nop
 8002ad0:	080037bc 	.word	0x080037bc
 8002ad4:	080037c2 	.word	0x080037c2
 8002ad8:	080037c6 	.word	0x080037c6
 8002adc:	00000000 	.word	0x00000000
 8002ae0:	08002841 	.word	0x08002841

08002ae4 <_printf_common>:
 8002ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ae8:	4691      	mov	r9, r2
 8002aea:	461f      	mov	r7, r3
 8002aec:	688a      	ldr	r2, [r1, #8]
 8002aee:	690b      	ldr	r3, [r1, #16]
 8002af0:	4606      	mov	r6, r0
 8002af2:	4293      	cmp	r3, r2
 8002af4:	bfb8      	it	lt
 8002af6:	4613      	movlt	r3, r2
 8002af8:	f8c9 3000 	str.w	r3, [r9]
 8002afc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b00:	460c      	mov	r4, r1
 8002b02:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b06:	b112      	cbz	r2, 8002b0e <_printf_common+0x2a>
 8002b08:	3301      	adds	r3, #1
 8002b0a:	f8c9 3000 	str.w	r3, [r9]
 8002b0e:	6823      	ldr	r3, [r4, #0]
 8002b10:	0699      	lsls	r1, r3, #26
 8002b12:	bf42      	ittt	mi
 8002b14:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002b18:	3302      	addmi	r3, #2
 8002b1a:	f8c9 3000 	strmi.w	r3, [r9]
 8002b1e:	6825      	ldr	r5, [r4, #0]
 8002b20:	f015 0506 	ands.w	r5, r5, #6
 8002b24:	d107      	bne.n	8002b36 <_printf_common+0x52>
 8002b26:	f104 0a19 	add.w	sl, r4, #25
 8002b2a:	68e3      	ldr	r3, [r4, #12]
 8002b2c:	f8d9 2000 	ldr.w	r2, [r9]
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	42ab      	cmp	r3, r5
 8002b34:	dc29      	bgt.n	8002b8a <_printf_common+0xa6>
 8002b36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002b3a:	6822      	ldr	r2, [r4, #0]
 8002b3c:	3300      	adds	r3, #0
 8002b3e:	bf18      	it	ne
 8002b40:	2301      	movne	r3, #1
 8002b42:	0692      	lsls	r2, r2, #26
 8002b44:	d42e      	bmi.n	8002ba4 <_printf_common+0xc0>
 8002b46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b4a:	4639      	mov	r1, r7
 8002b4c:	4630      	mov	r0, r6
 8002b4e:	47c0      	blx	r8
 8002b50:	3001      	adds	r0, #1
 8002b52:	d021      	beq.n	8002b98 <_printf_common+0xb4>
 8002b54:	6823      	ldr	r3, [r4, #0]
 8002b56:	68e5      	ldr	r5, [r4, #12]
 8002b58:	f003 0306 	and.w	r3, r3, #6
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	bf18      	it	ne
 8002b60:	2500      	movne	r5, #0
 8002b62:	f8d9 2000 	ldr.w	r2, [r9]
 8002b66:	f04f 0900 	mov.w	r9, #0
 8002b6a:	bf08      	it	eq
 8002b6c:	1aad      	subeq	r5, r5, r2
 8002b6e:	68a3      	ldr	r3, [r4, #8]
 8002b70:	6922      	ldr	r2, [r4, #16]
 8002b72:	bf08      	it	eq
 8002b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	bfc4      	itt	gt
 8002b7c:	1a9b      	subgt	r3, r3, r2
 8002b7e:	18ed      	addgt	r5, r5, r3
 8002b80:	341a      	adds	r4, #26
 8002b82:	454d      	cmp	r5, r9
 8002b84:	d11a      	bne.n	8002bbc <_printf_common+0xd8>
 8002b86:	2000      	movs	r0, #0
 8002b88:	e008      	b.n	8002b9c <_printf_common+0xb8>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	4652      	mov	r2, sl
 8002b8e:	4639      	mov	r1, r7
 8002b90:	4630      	mov	r0, r6
 8002b92:	47c0      	blx	r8
 8002b94:	3001      	adds	r0, #1
 8002b96:	d103      	bne.n	8002ba0 <_printf_common+0xbc>
 8002b98:	f04f 30ff 	mov.w	r0, #4294967295
 8002b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ba0:	3501      	adds	r5, #1
 8002ba2:	e7c2      	b.n	8002b2a <_printf_common+0x46>
 8002ba4:	2030      	movs	r0, #48	; 0x30
 8002ba6:	18e1      	adds	r1, r4, r3
 8002ba8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002bb2:	4422      	add	r2, r4
 8002bb4:	3302      	adds	r3, #2
 8002bb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002bba:	e7c4      	b.n	8002b46 <_printf_common+0x62>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	4622      	mov	r2, r4
 8002bc0:	4639      	mov	r1, r7
 8002bc2:	4630      	mov	r0, r6
 8002bc4:	47c0      	blx	r8
 8002bc6:	3001      	adds	r0, #1
 8002bc8:	d0e6      	beq.n	8002b98 <_printf_common+0xb4>
 8002bca:	f109 0901 	add.w	r9, r9, #1
 8002bce:	e7d8      	b.n	8002b82 <_printf_common+0x9e>

08002bd0 <_printf_i>:
 8002bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002bd4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002bd8:	460c      	mov	r4, r1
 8002bda:	7e09      	ldrb	r1, [r1, #24]
 8002bdc:	b085      	sub	sp, #20
 8002bde:	296e      	cmp	r1, #110	; 0x6e
 8002be0:	4617      	mov	r7, r2
 8002be2:	4606      	mov	r6, r0
 8002be4:	4698      	mov	r8, r3
 8002be6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002be8:	f000 80b3 	beq.w	8002d52 <_printf_i+0x182>
 8002bec:	d822      	bhi.n	8002c34 <_printf_i+0x64>
 8002bee:	2963      	cmp	r1, #99	; 0x63
 8002bf0:	d036      	beq.n	8002c60 <_printf_i+0x90>
 8002bf2:	d80a      	bhi.n	8002c0a <_printf_i+0x3a>
 8002bf4:	2900      	cmp	r1, #0
 8002bf6:	f000 80b9 	beq.w	8002d6c <_printf_i+0x19c>
 8002bfa:	2958      	cmp	r1, #88	; 0x58
 8002bfc:	f000 8083 	beq.w	8002d06 <_printf_i+0x136>
 8002c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c04:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002c08:	e032      	b.n	8002c70 <_printf_i+0xa0>
 8002c0a:	2964      	cmp	r1, #100	; 0x64
 8002c0c:	d001      	beq.n	8002c12 <_printf_i+0x42>
 8002c0e:	2969      	cmp	r1, #105	; 0x69
 8002c10:	d1f6      	bne.n	8002c00 <_printf_i+0x30>
 8002c12:	6820      	ldr	r0, [r4, #0]
 8002c14:	6813      	ldr	r3, [r2, #0]
 8002c16:	0605      	lsls	r5, r0, #24
 8002c18:	f103 0104 	add.w	r1, r3, #4
 8002c1c:	d52a      	bpl.n	8002c74 <_printf_i+0xa4>
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6011      	str	r1, [r2, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	da03      	bge.n	8002c2e <_printf_i+0x5e>
 8002c26:	222d      	movs	r2, #45	; 0x2d
 8002c28:	425b      	negs	r3, r3
 8002c2a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002c2e:	486f      	ldr	r0, [pc, #444]	; (8002dec <_printf_i+0x21c>)
 8002c30:	220a      	movs	r2, #10
 8002c32:	e039      	b.n	8002ca8 <_printf_i+0xd8>
 8002c34:	2973      	cmp	r1, #115	; 0x73
 8002c36:	f000 809d 	beq.w	8002d74 <_printf_i+0x1a4>
 8002c3a:	d808      	bhi.n	8002c4e <_printf_i+0x7e>
 8002c3c:	296f      	cmp	r1, #111	; 0x6f
 8002c3e:	d020      	beq.n	8002c82 <_printf_i+0xb2>
 8002c40:	2970      	cmp	r1, #112	; 0x70
 8002c42:	d1dd      	bne.n	8002c00 <_printf_i+0x30>
 8002c44:	6823      	ldr	r3, [r4, #0]
 8002c46:	f043 0320 	orr.w	r3, r3, #32
 8002c4a:	6023      	str	r3, [r4, #0]
 8002c4c:	e003      	b.n	8002c56 <_printf_i+0x86>
 8002c4e:	2975      	cmp	r1, #117	; 0x75
 8002c50:	d017      	beq.n	8002c82 <_printf_i+0xb2>
 8002c52:	2978      	cmp	r1, #120	; 0x78
 8002c54:	d1d4      	bne.n	8002c00 <_printf_i+0x30>
 8002c56:	2378      	movs	r3, #120	; 0x78
 8002c58:	4865      	ldr	r0, [pc, #404]	; (8002df0 <_printf_i+0x220>)
 8002c5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c5e:	e055      	b.n	8002d0c <_printf_i+0x13c>
 8002c60:	6813      	ldr	r3, [r2, #0]
 8002c62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c66:	1d19      	adds	r1, r3, #4
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6011      	str	r1, [r2, #0]
 8002c6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c70:	2301      	movs	r3, #1
 8002c72:	e08c      	b.n	8002d8e <_printf_i+0x1be>
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c7a:	6011      	str	r1, [r2, #0]
 8002c7c:	bf18      	it	ne
 8002c7e:	b21b      	sxthne	r3, r3
 8002c80:	e7cf      	b.n	8002c22 <_printf_i+0x52>
 8002c82:	6813      	ldr	r3, [r2, #0]
 8002c84:	6825      	ldr	r5, [r4, #0]
 8002c86:	1d18      	adds	r0, r3, #4
 8002c88:	6010      	str	r0, [r2, #0]
 8002c8a:	0628      	lsls	r0, r5, #24
 8002c8c:	d501      	bpl.n	8002c92 <_printf_i+0xc2>
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	e002      	b.n	8002c98 <_printf_i+0xc8>
 8002c92:	0668      	lsls	r0, r5, #25
 8002c94:	d5fb      	bpl.n	8002c8e <_printf_i+0xbe>
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	296f      	cmp	r1, #111	; 0x6f
 8002c9a:	bf14      	ite	ne
 8002c9c:	220a      	movne	r2, #10
 8002c9e:	2208      	moveq	r2, #8
 8002ca0:	4852      	ldr	r0, [pc, #328]	; (8002dec <_printf_i+0x21c>)
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ca8:	6865      	ldr	r5, [r4, #4]
 8002caa:	2d00      	cmp	r5, #0
 8002cac:	60a5      	str	r5, [r4, #8]
 8002cae:	f2c0 8095 	blt.w	8002ddc <_printf_i+0x20c>
 8002cb2:	6821      	ldr	r1, [r4, #0]
 8002cb4:	f021 0104 	bic.w	r1, r1, #4
 8002cb8:	6021      	str	r1, [r4, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d13d      	bne.n	8002d3a <_printf_i+0x16a>
 8002cbe:	2d00      	cmp	r5, #0
 8002cc0:	f040 808e 	bne.w	8002de0 <_printf_i+0x210>
 8002cc4:	4665      	mov	r5, ip
 8002cc6:	2a08      	cmp	r2, #8
 8002cc8:	d10b      	bne.n	8002ce2 <_printf_i+0x112>
 8002cca:	6823      	ldr	r3, [r4, #0]
 8002ccc:	07db      	lsls	r3, r3, #31
 8002cce:	d508      	bpl.n	8002ce2 <_printf_i+0x112>
 8002cd0:	6923      	ldr	r3, [r4, #16]
 8002cd2:	6862      	ldr	r2, [r4, #4]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	bfde      	ittt	le
 8002cd8:	2330      	movle	r3, #48	; 0x30
 8002cda:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002cde:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ce2:	ebac 0305 	sub.w	r3, ip, r5
 8002ce6:	6123      	str	r3, [r4, #16]
 8002ce8:	f8cd 8000 	str.w	r8, [sp]
 8002cec:	463b      	mov	r3, r7
 8002cee:	aa03      	add	r2, sp, #12
 8002cf0:	4621      	mov	r1, r4
 8002cf2:	4630      	mov	r0, r6
 8002cf4:	f7ff fef6 	bl	8002ae4 <_printf_common>
 8002cf8:	3001      	adds	r0, #1
 8002cfa:	d14d      	bne.n	8002d98 <_printf_i+0x1c8>
 8002cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002d00:	b005      	add	sp, #20
 8002d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d06:	4839      	ldr	r0, [pc, #228]	; (8002dec <_printf_i+0x21c>)
 8002d08:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002d0c:	6813      	ldr	r3, [r2, #0]
 8002d0e:	6821      	ldr	r1, [r4, #0]
 8002d10:	1d1d      	adds	r5, r3, #4
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6015      	str	r5, [r2, #0]
 8002d16:	060a      	lsls	r2, r1, #24
 8002d18:	d50b      	bpl.n	8002d32 <_printf_i+0x162>
 8002d1a:	07ca      	lsls	r2, r1, #31
 8002d1c:	bf44      	itt	mi
 8002d1e:	f041 0120 	orrmi.w	r1, r1, #32
 8002d22:	6021      	strmi	r1, [r4, #0]
 8002d24:	b91b      	cbnz	r3, 8002d2e <_printf_i+0x15e>
 8002d26:	6822      	ldr	r2, [r4, #0]
 8002d28:	f022 0220 	bic.w	r2, r2, #32
 8002d2c:	6022      	str	r2, [r4, #0]
 8002d2e:	2210      	movs	r2, #16
 8002d30:	e7b7      	b.n	8002ca2 <_printf_i+0xd2>
 8002d32:	064d      	lsls	r5, r1, #25
 8002d34:	bf48      	it	mi
 8002d36:	b29b      	uxthmi	r3, r3
 8002d38:	e7ef      	b.n	8002d1a <_printf_i+0x14a>
 8002d3a:	4665      	mov	r5, ip
 8002d3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d40:	fb02 3311 	mls	r3, r2, r1, r3
 8002d44:	5cc3      	ldrb	r3, [r0, r3]
 8002d46:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	2900      	cmp	r1, #0
 8002d4e:	d1f5      	bne.n	8002d3c <_printf_i+0x16c>
 8002d50:	e7b9      	b.n	8002cc6 <_printf_i+0xf6>
 8002d52:	6813      	ldr	r3, [r2, #0]
 8002d54:	6825      	ldr	r5, [r4, #0]
 8002d56:	1d18      	adds	r0, r3, #4
 8002d58:	6961      	ldr	r1, [r4, #20]
 8002d5a:	6010      	str	r0, [r2, #0]
 8002d5c:	0628      	lsls	r0, r5, #24
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	d501      	bpl.n	8002d66 <_printf_i+0x196>
 8002d62:	6019      	str	r1, [r3, #0]
 8002d64:	e002      	b.n	8002d6c <_printf_i+0x19c>
 8002d66:	066a      	lsls	r2, r5, #25
 8002d68:	d5fb      	bpl.n	8002d62 <_printf_i+0x192>
 8002d6a:	8019      	strh	r1, [r3, #0]
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	4665      	mov	r5, ip
 8002d70:	6123      	str	r3, [r4, #16]
 8002d72:	e7b9      	b.n	8002ce8 <_printf_i+0x118>
 8002d74:	6813      	ldr	r3, [r2, #0]
 8002d76:	1d19      	adds	r1, r3, #4
 8002d78:	6011      	str	r1, [r2, #0]
 8002d7a:	681d      	ldr	r5, [r3, #0]
 8002d7c:	6862      	ldr	r2, [r4, #4]
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4628      	mov	r0, r5
 8002d82:	f000 f837 	bl	8002df4 <memchr>
 8002d86:	b108      	cbz	r0, 8002d8c <_printf_i+0x1bc>
 8002d88:	1b40      	subs	r0, r0, r5
 8002d8a:	6060      	str	r0, [r4, #4]
 8002d8c:	6863      	ldr	r3, [r4, #4]
 8002d8e:	6123      	str	r3, [r4, #16]
 8002d90:	2300      	movs	r3, #0
 8002d92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d96:	e7a7      	b.n	8002ce8 <_printf_i+0x118>
 8002d98:	6923      	ldr	r3, [r4, #16]
 8002d9a:	462a      	mov	r2, r5
 8002d9c:	4639      	mov	r1, r7
 8002d9e:	4630      	mov	r0, r6
 8002da0:	47c0      	blx	r8
 8002da2:	3001      	adds	r0, #1
 8002da4:	d0aa      	beq.n	8002cfc <_printf_i+0x12c>
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	079b      	lsls	r3, r3, #30
 8002daa:	d413      	bmi.n	8002dd4 <_printf_i+0x204>
 8002dac:	68e0      	ldr	r0, [r4, #12]
 8002dae:	9b03      	ldr	r3, [sp, #12]
 8002db0:	4298      	cmp	r0, r3
 8002db2:	bfb8      	it	lt
 8002db4:	4618      	movlt	r0, r3
 8002db6:	e7a3      	b.n	8002d00 <_printf_i+0x130>
 8002db8:	2301      	movs	r3, #1
 8002dba:	464a      	mov	r2, r9
 8002dbc:	4639      	mov	r1, r7
 8002dbe:	4630      	mov	r0, r6
 8002dc0:	47c0      	blx	r8
 8002dc2:	3001      	adds	r0, #1
 8002dc4:	d09a      	beq.n	8002cfc <_printf_i+0x12c>
 8002dc6:	3501      	adds	r5, #1
 8002dc8:	68e3      	ldr	r3, [r4, #12]
 8002dca:	9a03      	ldr	r2, [sp, #12]
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	42ab      	cmp	r3, r5
 8002dd0:	dcf2      	bgt.n	8002db8 <_printf_i+0x1e8>
 8002dd2:	e7eb      	b.n	8002dac <_printf_i+0x1dc>
 8002dd4:	2500      	movs	r5, #0
 8002dd6:	f104 0919 	add.w	r9, r4, #25
 8002dda:	e7f5      	b.n	8002dc8 <_printf_i+0x1f8>
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1ac      	bne.n	8002d3a <_printf_i+0x16a>
 8002de0:	7803      	ldrb	r3, [r0, #0]
 8002de2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002de6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002dea:	e76c      	b.n	8002cc6 <_printf_i+0xf6>
 8002dec:	080037cd 	.word	0x080037cd
 8002df0:	080037de 	.word	0x080037de

08002df4 <memchr>:
 8002df4:	b510      	push	{r4, lr}
 8002df6:	b2c9      	uxtb	r1, r1
 8002df8:	4402      	add	r2, r0
 8002dfa:	4290      	cmp	r0, r2
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	d101      	bne.n	8002e04 <memchr+0x10>
 8002e00:	2300      	movs	r3, #0
 8002e02:	e003      	b.n	8002e0c <memchr+0x18>
 8002e04:	781c      	ldrb	r4, [r3, #0]
 8002e06:	3001      	adds	r0, #1
 8002e08:	428c      	cmp	r4, r1
 8002e0a:	d1f6      	bne.n	8002dfa <memchr+0x6>
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	bd10      	pop	{r4, pc}

08002e10 <memcpy>:
 8002e10:	b510      	push	{r4, lr}
 8002e12:	1e43      	subs	r3, r0, #1
 8002e14:	440a      	add	r2, r1
 8002e16:	4291      	cmp	r1, r2
 8002e18:	d100      	bne.n	8002e1c <memcpy+0xc>
 8002e1a:	bd10      	pop	{r4, pc}
 8002e1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e24:	e7f7      	b.n	8002e16 <memcpy+0x6>

08002e26 <memmove>:
 8002e26:	4288      	cmp	r0, r1
 8002e28:	b510      	push	{r4, lr}
 8002e2a:	eb01 0302 	add.w	r3, r1, r2
 8002e2e:	d807      	bhi.n	8002e40 <memmove+0x1a>
 8002e30:	1e42      	subs	r2, r0, #1
 8002e32:	4299      	cmp	r1, r3
 8002e34:	d00a      	beq.n	8002e4c <memmove+0x26>
 8002e36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e3a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002e3e:	e7f8      	b.n	8002e32 <memmove+0xc>
 8002e40:	4283      	cmp	r3, r0
 8002e42:	d9f5      	bls.n	8002e30 <memmove+0xa>
 8002e44:	1881      	adds	r1, r0, r2
 8002e46:	1ad2      	subs	r2, r2, r3
 8002e48:	42d3      	cmn	r3, r2
 8002e4a:	d100      	bne.n	8002e4e <memmove+0x28>
 8002e4c:	bd10      	pop	{r4, pc}
 8002e4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e52:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002e56:	e7f7      	b.n	8002e48 <memmove+0x22>

08002e58 <_realloc_r>:
 8002e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5a:	4607      	mov	r7, r0
 8002e5c:	4614      	mov	r4, r2
 8002e5e:	460e      	mov	r6, r1
 8002e60:	b921      	cbnz	r1, 8002e6c <_realloc_r+0x14>
 8002e62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002e66:	4611      	mov	r1, r2
 8002e68:	f7ff bbda 	b.w	8002620 <_malloc_r>
 8002e6c:	b922      	cbnz	r2, 8002e78 <_realloc_r+0x20>
 8002e6e:	f7ff fb8b 	bl	8002588 <_free_r>
 8002e72:	4625      	mov	r5, r4
 8002e74:	4628      	mov	r0, r5
 8002e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e78:	f000 f814 	bl	8002ea4 <_malloc_usable_size_r>
 8002e7c:	42a0      	cmp	r0, r4
 8002e7e:	d20f      	bcs.n	8002ea0 <_realloc_r+0x48>
 8002e80:	4621      	mov	r1, r4
 8002e82:	4638      	mov	r0, r7
 8002e84:	f7ff fbcc 	bl	8002620 <_malloc_r>
 8002e88:	4605      	mov	r5, r0
 8002e8a:	2800      	cmp	r0, #0
 8002e8c:	d0f2      	beq.n	8002e74 <_realloc_r+0x1c>
 8002e8e:	4631      	mov	r1, r6
 8002e90:	4622      	mov	r2, r4
 8002e92:	f7ff ffbd 	bl	8002e10 <memcpy>
 8002e96:	4631      	mov	r1, r6
 8002e98:	4638      	mov	r0, r7
 8002e9a:	f7ff fb75 	bl	8002588 <_free_r>
 8002e9e:	e7e9      	b.n	8002e74 <_realloc_r+0x1c>
 8002ea0:	4635      	mov	r5, r6
 8002ea2:	e7e7      	b.n	8002e74 <_realloc_r+0x1c>

08002ea4 <_malloc_usable_size_r>:
 8002ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ea8:	1f18      	subs	r0, r3, #4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	bfbc      	itt	lt
 8002eae:	580b      	ldrlt	r3, [r1, r0]
 8002eb0:	18c0      	addlt	r0, r0, r3
 8002eb2:	4770      	bx	lr

08002eb4 <_gettimeofday>:
 8002eb4:	2258      	movs	r2, #88	; 0x58
 8002eb6:	4b02      	ldr	r3, [pc, #8]	; (8002ec0 <_gettimeofday+0xc>)
 8002eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	4770      	bx	lr
 8002ec0:	200001c0 	.word	0x200001c0

08002ec4 <_init>:
 8002ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec6:	bf00      	nop
 8002ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eca:	bc08      	pop	{r3}
 8002ecc:	469e      	mov	lr, r3
 8002ece:	4770      	bx	lr

08002ed0 <_fini>:
 8002ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed2:	bf00      	nop
 8002ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ed6:	bc08      	pop	{r3}
 8002ed8:	469e      	mov	lr, r3
 8002eda:	4770      	bx	lr
